<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="A4221E93-0ECA-4D35-BD8C-A92703A7B5B7" MigrationValue="Normal" Owner="0" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<ParamSection SectVersion="27" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>0.2</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.09</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.29</Value>
		</Length>
		<Integer Name="iEntityType">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
		</Title>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Material Name="gs_profile_mat">
			<Description><![CDATA["Profile Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Material>
		<BuildingMaterial Name="gs_ifc_buildingmaterial">
			<Description><![CDATA["Building Material"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</BuildingMaterial>
		<Boolean Name="gs_ifc_override">
			<Description><![CDATA["Override Material"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_show_edge_fillet">
			<Description><![CDATA["Show Edge Fillet"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- IFC2x2Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="IFC2x2Title">
			<Description><![CDATA["IFC 2x2 Parameters"]]></Description>
		</Title>
		<String Name="Ifc2x2RootType">
			<Description><![CDATA["Root Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["IfcПанель"]]></Value>
		</String>

		<!-- PlacementTitle: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="PlacementTitle">
			<Description><![CDATA["Placement"]]></Description>
		</Title>
		<Angle Name="rx">
			<Description><![CDATA["Rot X"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="ry">
			<Description><![CDATA["Rot Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="expx">
			<Description><![CDATA["Extrusion Position X"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.09</Value>
		</Length>
		<Length Name="expy">
			<Description><![CDATA["Extrusion Position Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="expz">
			<Description><![CDATA["Extrusion Position Z"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.09</Value>
		</Length>
		<Angle Name="exrx">
			<Description><![CDATA["Extrusion Rotation X"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="exry">
			<Description><![CDATA["Extrusion Rotation Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="exrz">
			<Description><![CDATA["Extrusion Rotation Z"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="exx">
			<Description><![CDATA["Extrusion Length X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="exy">
			<Description><![CDATA["Extrusion Length Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="exz">
			<Description><![CDATA["Extrusion Length Z"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- ProfileTitle: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ProfileTitle">
			<Description><![CDATA["Profile Parameters"]]></Description>
		</Title>
		<String Name="ProfileType">
			<Description><![CDATA["Profile Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ПРЯМОУГОЛЬНИК"]]></Value>
		</String>
		<Integer Name="iProfileType">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>10</Value>
		</Integer>
		<Length Name="ws">
			<Description><![CDATA["Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="bs">
			<Description><![CDATA["Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="ds">
			<Description><![CDATA["Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Integer Name="ProfileNr">
			<Description><![CDATA["Profile Points"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<RealNum Name="Profile">
			<Description><![CDATA["Profile"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="50" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="1" Row="3">0</AVal>
				<AVal Column="2" Row="3">0</AVal>
				<AVal Column="1" Row="4">0</AVal>
				<AVal Column="2" Row="4">0</AVal>
				<AVal Column="1" Row="5">0</AVal>
				<AVal Column="2" Row="5">0</AVal>
				<AVal Column="1" Row="6">0</AVal>
				<AVal Column="2" Row="6">0</AVal>
				<AVal Column="1" Row="7">0</AVal>
				<AVal Column="2" Row="7">0</AVal>
				<AVal Column="1" Row="8">0</AVal>
				<AVal Column="2" Row="8">0</AVal>
				<AVal Column="1" Row="9">0</AVal>
				<AVal Column="2" Row="9">0</AVal>
				<AVal Column="1" Row="10">0</AVal>
				<AVal Column="2" Row="10">0</AVal>
				<AVal Column="1" Row="11">0</AVal>
				<AVal Column="2" Row="11">0</AVal>
				<AVal Column="1" Row="12">0</AVal>
				<AVal Column="2" Row="12">0</AVal>
				<AVal Column="1" Row="13">0</AVal>
				<AVal Column="2" Row="13">0</AVal>
				<AVal Column="1" Row="14">0</AVal>
				<AVal Column="2" Row="14">0</AVal>
				<AVal Column="1" Row="15">0</AVal>
				<AVal Column="2" Row="15">0</AVal>
				<AVal Column="1" Row="16">0</AVal>
				<AVal Column="2" Row="16">0</AVal>
				<AVal Column="1" Row="17">0</AVal>
				<AVal Column="2" Row="17">0</AVal>
				<AVal Column="1" Row="18">0</AVal>
				<AVal Column="2" Row="18">0</AVal>
				<AVal Column="1" Row="19">0</AVal>
				<AVal Column="2" Row="19">0</AVal>
				<AVal Column="1" Row="20">0</AVal>
				<AVal Column="2" Row="20">0</AVal>
				<AVal Column="1" Row="21">0</AVal>
				<AVal Column="2" Row="21">0</AVal>
				<AVal Column="1" Row="22">0</AVal>
				<AVal Column="2" Row="22">0</AVal>
				<AVal Column="1" Row="23">0</AVal>
				<AVal Column="2" Row="23">0</AVal>
				<AVal Column="1" Row="24">0</AVal>
				<AVal Column="2" Row="24">0</AVal>
				<AVal Column="1" Row="25">0</AVal>
				<AVal Column="2" Row="25">0</AVal>
				<AVal Column="1" Row="26">0</AVal>
				<AVal Column="2" Row="26">0</AVal>
				<AVal Column="1" Row="27">0</AVal>
				<AVal Column="2" Row="27">0</AVal>
				<AVal Column="1" Row="28">0</AVal>
				<AVal Column="2" Row="28">0</AVal>
				<AVal Column="1" Row="29">0</AVal>
				<AVal Column="2" Row="29">0</AVal>
				<AVal Column="1" Row="30">0</AVal>
				<AVal Column="2" Row="30">0</AVal>
				<AVal Column="1" Row="31">0</AVal>
				<AVal Column="2" Row="31">0</AVal>
				<AVal Column="1" Row="32">0</AVal>
				<AVal Column="2" Row="32">0</AVal>
				<AVal Column="1" Row="33">0</AVal>
				<AVal Column="2" Row="33">0</AVal>
				<AVal Column="1" Row="34">0</AVal>
				<AVal Column="2" Row="34">0</AVal>
				<AVal Column="1" Row="35">0</AVal>
				<AVal Column="2" Row="35">0</AVal>
				<AVal Column="1" Row="36">0</AVal>
				<AVal Column="2" Row="36">0</AVal>
				<AVal Column="1" Row="37">0</AVal>
				<AVal Column="2" Row="37">0</AVal>
				<AVal Column="1" Row="38">0</AVal>
				<AVal Column="2" Row="38">0</AVal>
				<AVal Column="1" Row="39">0</AVal>
				<AVal Column="2" Row="39">0</AVal>
				<AVal Column="1" Row="40">0</AVal>
				<AVal Column="2" Row="40">0</AVal>
				<AVal Column="1" Row="41">0</AVal>
				<AVal Column="2" Row="41">0</AVal>
				<AVal Column="1" Row="42">0</AVal>
				<AVal Column="2" Row="42">0</AVal>
				<AVal Column="1" Row="43">0</AVal>
				<AVal Column="2" Row="43">0</AVal>
				<AVal Column="1" Row="44">0</AVal>
				<AVal Column="2" Row="44">0</AVal>
				<AVal Column="1" Row="45">0</AVal>
				<AVal Column="2" Row="45">0</AVal>
				<AVal Column="1" Row="46">0</AVal>
				<AVal Column="2" Row="46">0</AVal>
				<AVal Column="1" Row="47">0</AVal>
				<AVal Column="2" Row="47">0</AVal>
				<AVal Column="1" Row="48">0</AVal>
				<AVal Column="2" Row="48">0</AVal>
				<AVal Column="1" Row="49">0</AVal>
				<AVal Column="2" Row="49">0</AVal>
				<AVal Column="1" Row="50">0</AVal>
				<AVal Column="2" Row="50">0</AVal>
			</ArrayValues>
		</RealNum>
		<Integer Name="PStatus">
			<Description><![CDATA["Profile Status"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="50" SecondDimension="0">
				<AVal Row="1">0</AVal>
				<AVal Row="2">0</AVal>
				<AVal Row="3">0</AVal>
				<AVal Row="4">0</AVal>
				<AVal Row="5">0</AVal>
				<AVal Row="6">0</AVal>
				<AVal Row="7">0</AVal>
				<AVal Row="8">0</AVal>
				<AVal Row="9">0</AVal>
				<AVal Row="10">0</AVal>
				<AVal Row="11">0</AVal>
				<AVal Row="12">0</AVal>
				<AVal Row="13">0</AVal>
				<AVal Row="14">0</AVal>
				<AVal Row="15">0</AVal>
				<AVal Row="16">0</AVal>
				<AVal Row="17">0</AVal>
				<AVal Row="18">0</AVal>
				<AVal Row="19">0</AVal>
				<AVal Row="20">0</AVal>
				<AVal Row="21">0</AVal>
				<AVal Row="22">0</AVal>
				<AVal Row="23">0</AVal>
				<AVal Row="24">0</AVal>
				<AVal Row="25">0</AVal>
				<AVal Row="26">0</AVal>
				<AVal Row="27">0</AVal>
				<AVal Row="28">0</AVal>
				<AVal Row="29">0</AVal>
				<AVal Row="30">0</AVal>
				<AVal Row="31">0</AVal>
				<AVal Row="32">0</AVal>
				<AVal Row="33">0</AVal>
				<AVal Row="34">0</AVal>
				<AVal Row="35">0</AVal>
				<AVal Row="36">0</AVal>
				<AVal Row="37">0</AVal>
				<AVal Row="38">0</AVal>
				<AVal Row="39">0</AVal>
				<AVal Row="40">0</AVal>
				<AVal Row="41">0</AVal>
				<AVal Row="42">0</AVal>
				<AVal Row="43">0</AVal>
				<AVal Row="44">0</AVal>
				<AVal Row="45">0</AVal>
				<AVal Row="46">0</AVal>
				<AVal Row="47">0</AVal>
				<AVal Row="48">0</AVal>
				<AVal Row="49">0</AVal>
				<AVal Row="50">0</AVal>
			</ArrayValues>
		</Integer>
		<RealNum Name="ac_polygonBounds">
			<Description><![CDATA["Polygon Bounds"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
			</ArrayValues>
		</RealNum>
		<Length Name="inr">
			<Description><![CDATA["Inner Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="outr">
			<Description><![CDATA["Outer Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ft">
			<Description><![CDATA["Flange Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.018</Value>
		</Length>
		<Length Name="wt">
			<Description><![CDATA["Web Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.015</Value>
		</Length>
		<Length Name="rr">
			<Description><![CDATA["Fillet Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="tr">
			<Description><![CDATA["Edge Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="etr">
			<Description><![CDATA["Web Edge Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="Girth">
			<Description><![CDATA["Girth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="TopXDim">
			<Description><![CDATA["Top X Dimension"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="TopXOffset">
			<Description><![CDATA["Top X Offset"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="SemiAxis1">
			<Description><![CDATA["X Axis"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="SemiAxis2">
			<Description><![CDATA["Y Axis"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="h">
			<Description><![CDATA["Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="BaseDepth1">
			<Description><![CDATA["Base Depth 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="BaseDepth2">
			<Description><![CDATA["Base Depth 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="BaseDepth3">
			<Description><![CDATA["Base Depth 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="BaseWidth2">
			<Description><![CDATA["Base Width 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="BaseWidth4">
			<Description><![CDATA["Base Width 4"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="HeadDepth2">
			<Description><![CDATA["Head Depth 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="HeadDepth3">
			<Description><![CDATA["Head Depth 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="HeadWidth">
			<Description><![CDATA["Head Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="ltpx">
			<Description><![CDATA["Profile Position X"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ltpy">
			<Description><![CDATA["Profile Position Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="ltrot">
			<Description><![CDATA["Profile Rotation Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>

		<!-- CutTitle: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="CutTitle">
			<Description><![CDATA["Cut Settings"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="CutNr">
			<Description><![CDATA["Cut Nr"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<RealNum Name="CutVector">
			<Description><![CDATA["Cut Vector"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="20" SecondDimension="0">
				<AVal Row="1">0</AVal>
				<AVal Row="2">0</AVal>
				<AVal Row="3">0</AVal>
				<AVal Row="4">0</AVal>
				<AVal Row="5">0</AVal>
				<AVal Row="6">0</AVal>
				<AVal Row="7">0</AVal>
				<AVal Row="8">0</AVal>
				<AVal Row="9">0</AVal>
				<AVal Row="10">0</AVal>
				<AVal Row="11">0</AVal>
				<AVal Row="12">0</AVal>
				<AVal Row="13">0</AVal>
				<AVal Row="14">0</AVal>
				<AVal Row="15">0</AVal>
				<AVal Row="16">0</AVal>
				<AVal Row="17">0</AVal>
				<AVal Row="18">0</AVal>
				<AVal Row="19">0</AVal>
				<AVal Row="20">0</AVal>
			</ArrayValues>
		</RealNum>
		<Boolean Name="bNeedOperationToMigrate">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iMigrationStep">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>
	</Parameters>
</ParamSection>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
IF gs_detlevel_3D=`Простой` then
	gs_resol=6
	SHADOW OFF
else
	gs_resol=24
ENDIF
RESOL gs_resol



!OBJECT LOCAL SYSTEM
roty ry
rotx rx

!EXTRUSION LOCAL SYSTEM
add expx, expy, expz

rotz exrz
roty exry
rotx exrx


! ==============================================================================
! Cutting Planes
! ==============================================================================

BUILDING_MATERIAL gs_ifc_buildingmaterial

if gs_ifc_override then
  material gs_profile_mat
endif

pen gs_cont_pen

if CutNr > 0 then
	for i=0 to CutNr - 1
		add CutVector[i*5+1], CutVector[i*5+2], CutVector[i*5+3]
		rotz CutVector[i*5+4]
		roty CutVector[i*5+5]
		cutplane
		del 3
	next i
endif


! ==============================================================================
! 3D Model
! ==============================================================================

!LocalTran
add ltpx, ltpy, 0
rotz ltrot

hotspot 0,	0,	ZZYZX/2

if nsp > 0 then
	if iProfileType = ID_PROFILETYPE_CSHAPE then
		resol arcRes / 4
	else
		resol arcRes
	endif
	extrude nsp/3, exx, exy, exz, 1+2+4+16+32, get(nsp)
endif


! ==============================================================================
! Cutting Planes
! ==============================================================================

if CutNr > 0 then
	for i=0 to CutNr - 1
		cutend
	next i
endif


]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
PEN gs_cont_pen
SET FILL gs_fill_type
PROJECT2{2} 3, 270.0, 3+32, gs_back_pen, 0, 0, 0

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

! iProfileType:
ID_PROFILETYPE_ARBITRARY		= 00
ID_PROFILETYPE_RECTANGLE		= 10
ID_PROFILETYPE_RECTANGLEHOLLOW	= 11
ID_PROFILETYPE_ROUNDEDRECTANGLE	= 12
ID_PROFILETYPE_CIRCLE			= 20
ID_PROFILETYPE_CIRCLEHOLLOW		= 21
ID_PROFILETYPE_ELLIPSE			= 22
ID_PROFILETYPE_TRAPEZIUM		= 30
ID_PROFILETYPE_CSHAPE			= 40
ID_PROFILETYPE_ISHAPE			= 41
ID_PROFILETYPE_LSHAPE			= 42
ID_PROFILETYPE_TSHAPE			= 43
ID_PROFILETYPE_USHAPE			= 44
ID_PROFILETYPE_ZSHAPE			= 45
ID_PROFILETYPE_CRANERAILASHAPE	= 50
ID_PROFILETYPE_CRANERAILFSHAPE	= 51

! iEntityType:
ENTITY_BEAM					= 1
ENTITY_COLUMN				= 2
ENTITY_DISCRETE_ACCESSORY	= 3
ENTITY_FOOTING				= 4
ENTITY_MEMBER				= 5
ENTITY_OPENING				= 6
ENTITY_PILE					= 7
ENTITY_PLATE				= 8

if GLOB_MODPAR_NAME = "ProfileType" | iProfileType = -1 then
	iProfileType = ID_PROFILETYPE_ARBITRARY
	if ProfileType = "RECTANGLE" | ProfileType = `ПРЯМОУГОЛЬНИК`				then iProfileType = ID_PROFILETYPE_RECTANGLE
	if ProfileType = "RECTANGLEHOLLOW" | ProfileType = `RECTANGLEHOLLOW`	then iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW
	if ProfileType = "ROUNDEDRECTANGLE" | ProfileType = `ROUNDEDRECTANGLE`	then iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE
	if ProfileType = "CIRCLE" | ProfileType = `CIRCLE`						then iProfileType = ID_PROFILETYPE_CIRCLE
	if ProfileType = "CIRCLEHOLLOW" | ProfileType = `CIRCLEHOLLOW`			then iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW
	if ProfileType = "ELLIPSE" | ProfileType = `ELLIPSE`					then iProfileType = ID_PROFILETYPE_ELLIPSE
	if ProfileType = "TRAPEZIUM" | ProfileType = `TRAPEZIUM`				then iProfileType = ID_PROFILETYPE_TRAPEZIUM
	if ProfileType = "CSHAPE" | ProfileType = `CSHAPE`						then iProfileType = ID_PROFILETYPE_CSHAPE
	if ProfileType = "ISHAPE" | ProfileType = `ISHAPE`						then iProfileType = ID_PROFILETYPE_ISHAPE
	if ProfileType = "LSHAPE" | ProfileType = `LSHAPE`						then iProfileType = ID_PROFILETYPE_LSHAPE
	if ProfileType = "TSHAPE" | ProfileType = `TSHAPE`						then iProfileType = ID_PROFILETYPE_TSHAPE
	if ProfileType = "USHAPE" | ProfileType = `USHAPE`						then iProfileType = ID_PROFILETYPE_USHAPE
	if ProfileType = "ZSHAPE" | ProfileType = `ZSHAPE`						then iProfileType = ID_PROFILETYPE_ZSHAPE
	if ProfileType = "CRANERAILASHAPE" | ProfileType = `CRANERAILASHAPE`	then iProfileType = ID_PROFILETYPE_CRANERAILASHAPE
	if ProfileType = "CRANERAILFSHAPE" | ProfileType = `CRANERAILFSHAPE`	then iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE
	parameters iProfileType = iProfileType
endif

!show_if_vert=1 : show_if_gor=1 : show_if_ang=1
!success = LIBRARYGLOBAL ("Libraryflobals-km", "show_if_vert", show_if_vert)
!success = LIBRARYGLOBAL ("Libraryflobals-km", "show_if_gor", show_if_gor)
!success = LIBRARYGLOBAL ("Libraryflobals-km", "show_if_ang", show_if_ang)
!if el_type_view=1 and not(show_if_gor) and show then show = 0
!if el_type_view=2 and not(show_if_vert) and show then show = 0
!if el_type_view=3 and not(show_if_ang) and show then show = 0

EXTRUDE_MIN_SEGMENTATION = 16
ELLIPSE_MIN_SEGMENTATION = 64
SEGMENTATION_ARC_LENGTH = 0.1
arcRes = 32
success = LIBRARYGLOBAL ("Libraryflobals-km", "gs_detlevel_3D", gs_detlevel_3D)
IF gs_detlevel_3D=`Простой` then
	EXTRUDE_MIN_SEGMENTATION = 16
	ELLIPSE_MIN_SEGMENTATION = 64
	SEGMENTATION_ARC_LENGTH = 0.1
	arcRes = 32
endif






! ==============================================================================

if GLOB_SCRIPT_TYPE = 3 | GLOB_SCRIPT_TYPE = 5 then

	if iProfileType = ID_PROFILETYPE_ARBITRARY then
		if	GLOB_SCRIPT_TYPE = 3 |\
			(abs(ac_polygonBounds[1][1]) < EPS &\
			 abs(ac_polygonBounds[1][2]) < EPS &\
			 abs(ac_polygonBounds[2][1]) < EPS &\
			 abs(ac_polygonBounds[2][2]) < EPS ) then
		! if the ac_polygonBounds uninitialized

			numPoints = min(ProfileNr, vardim1(Profile), vardim1(PStatus))
			if numPoints > 2 then
				for i=1 to numPoints
					put Profile[i][1], Profile[i][2], PStatus[i]
				next i
			endif
		else
			put ac_polygonBounds[1][1], ac_polygonBounds[1][2], 0,
				ac_polygonBounds[1][1], ac_polygonBounds[2][2], 0,
				ac_polygonBounds[2][1], ac_polygonBounds[2][2], 0,
				ac_polygonBounds[2][1], ac_polygonBounds[1][2], 0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_RECTANGLE then
		dx = -ws / 2
		dy = -ds / 2

		put	dx,			dy,			0,
			dx + ws,	dy,			0,
			dx + ws,	dy + ds,	0,
			dx,			dy + ds,	0
	endif

	if iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW then
		dx = -bs / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 & gs_show_edge_fillet then
			edgeStatus1 = (outr > EPS)
			edgeStatus2 = (inr > EPS)

			put	dx,				dy + ds - outr,	edgeStatus1,
				dx,				dy + outr,		edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
				dx + outr,		dy,				edgeStatus1,
				dx + bs - outr,	dy,				edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
				dx + bs,		dy + outr,		edgeStatus1,
				dx + bs,		dy + ds - outr,	edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
				dx + bs - outr,	dy + ds,		edgeStatus1,
				dx + outr,		dy + ds,		edgeStatus1,
				outr,			90,				2000 + edgeStatus1
			if GLOB_SCRIPT_TYPE = 3 then	! Hole
				put	dx,					dy + ds - outr,		-1,
					dx + wt,			dy + ds - wt - inr,	edgeStatus2,
					dx + wt,			dy + wt + inr,		edgeStatus2,
					inr,				90,					2000 + edgeStatus2,
					dx + wt + inr,		dy + wt,			edgeStatus2,
					dx + bs - wt - inr,	dy + wt,			edgeStatus2,
					inr,				90,					2000 + edgeStatus2,
					dx + bs - wt,		dy + wt + inr,		edgeStatus2,
					dx + bs - wt,		dy + ds - wt - inr,	edgeStatus2,
					inr,				90,					2000 + edgeStatus2,
					dx + bs - wt - inr,	dy + ds - wt,		edgeStatus2,
					dx + wt + inr,		dy + ds - wt,		edgeStatus2,
					inr,				90,					2000 + edgeStatus2,
					dx + wt,			dy + ds - wt - inr,	-1
			endif
		else
			put	dx,			dy,			0,
				dx + bs,	dy,			0,
				dx + bs,	dy + ds,	0,
				dx,			dy + ds,	0
			if GLOB_SCRIPT_TYPE = 3 then	! Hole
				put	dx,				dy,				-1,
					dx + wt,		dy + wt,		0,
					dx + bs - wt,	dy + wt,		0,
					dx + bs - wt,	dy + ds - wt,	0,
					dx + wt,		dy + ds - wt,	0,
					dx + wt,		dy + wt,		-1
			endif
		endif
	endif

	if iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE then
		dx = -bs / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 & gs_show_edge_fillet then
			edgeStatus1 = (outr > EPS)

			put	dx,				dy + ds - outr,	edgeStatus1,
				dx,				dy + outr,		edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
				dx + outr,		dy,				edgeStatus1,
				dx + bs - outr,	dy,				edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
				dx + bs,		dy + outr,		edgeStatus1,
				dx + bs,		dy + ds - outr,	edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
				dx + bs - outr,	dy + ds,		edgeStatus1,
				dx + outr,		dy + ds,		edgeStatus1,
				outr,			90,				2000 + edgeStatus1,
		dx,				dy + ds - outr, -1
		else
			put	dx,			dy,			0,
				dx + bs,	dy,			0,
				dx + bs,	dy + ds,	0,
				dx,			dy + ds,	0,
		dx,			dy,			-1
		endif
	endif

	if	iProfileType = ID_PROFILETYPE_CIRCLE |\
		iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW then

		arcRes = ROUND_INT (ds * pi / SEGMENTATION_ARC_LENGTH)
		if arcRes < EXTRUDE_MIN_SEGMENTATION then
			arcRes = EXTRUDE_MIN_SEGMENTATION
		endif

		if GLOB_SCRIPT_TYPE = 3 then
			put	0, 0, 901,
				ds / 2, 360, 4001
			if iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW then	! Hole
				put ds / 2 - wt, 360, 4001
			endif
		else
			alpha = 0
			for i=1 to arcRes
				put (ds / 2) * sin(alpha),
					(ds / 2) * cos(alpha), 1
				alpha = alpha + 360/arcRes
			next i
		endif
	endif

	if iProfileType = ID_PROFILETYPE_ELLIPSE then

		if (SemiAxis1 > SemiAxis2) then
			arcRes = ROUND_INT (pi * SemiAxis1 / SEGMENTATION_ARC_LENGTH)
		else
			arcRes = ROUND_INT (pi * SemiAxis2 / SEGMENTATION_ARC_LENGTH)
		endif
		if arcRes < ELLIPSE_MIN_SEGMENTATION then
			arcRes = ELLIPSE_MIN_SEGMENTATION
		endif
		
		alpha = 0
		for i=1 to arcRes
			put SemiAxis1 * sin(alpha),
				SemiAxis2 * cos(alpha), 1
			alpha = alpha + 360/arcRes
		next i
	endif

	if iProfileType = ID_PROFILETYPE_TRAPEZIUM then
		put	0,						0,	0,
			ws,						0,	0,
			TopXOffset + TopXDim,	ds,	0,
			TopXOffset,				ds,	0
	endif

	if iProfileType = ID_PROFILETYPE_CSHAPE then
		dx = -ws / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 then
			if gs_show_edge_fillet & (rr > EPS) then
				edgeStatus = (rr > EPS)
				put	dx + ws,		dy + Girth,		0,
					dx + ws-wt,		dy + Girth,		0,
					dx + ws-wt,		dy + rr+wt,		edgeStatus,
					rr,				-90,			2000 + edgeStatus,
					dx + ws-wt-rr,	dy + wt,		edgeStatus,
					dx + wt+rr, 	dy + wt,		edgeStatus,
					rr,				-90,			2000 + edgeStatus,
					dx + wt,		dy + wt+rr,		edgeStatus,
					dx + wt,		dy + ds-wt-rr,	edgeStatus,
					rr,				-90,			2000 + edgeStatus,
					dx + wt+rr,		dy + ds-wt,		edgeStatus,
					dx + ws-wt-rr,	dy + ds-wt,		edgeStatus,
					rr,				-90,			2000 + edgeStatus,
					dx + ws-wt,		dy + ds-wt-rr,	edgeStatus,
					dx + ws-wt,		dy + ds-Girth,	0,
					dx + ws,		dy + ds-Girth,	0,
					dx + ws,		dy + ds-rr,		edgeStatus,
					rr,				90,				2000 + edgeStatus,
					dx + ws-rr,		dy + ds,		edgeStatus,
					dx + rr,		dy + ds,		edgeStatus,
					rr,				90,				2000 + edgeStatus,
					dx,				dy + ds-rr,		edgeStatus,
					dx,				dy + rr,		edgeStatus,
					rr,				90,				2000 + edgeStatus,
					dx + rr,		dy,				edgeStatus,
					dx + ws-rr,		dy,				edgeStatus,
					rr,				90,				2000 + edgeStatus,
					dx + ws,		dy + rr,		edgeStatus,
					dx + ws,		dy + Girth,		-1
			else
				put	dx + ws,		dy + Girth,		0,
					dx + ws - wt,	dy + Girth,		0,
					dx + ws - wt,	dy + wt,		0,
					dx + wt,		dy + wt,		0,
					dx + wt,		dy + ds-wt,		0,
					dx + ws - wt,	dy + ds-wt,		0,
					dx + ws - wt,	dy + ds-Girth,	0,
					dx + ws,		dy + ds-Girth,	0,
					dx + ws,		dy + ds,		0,
					dx,				dy + ds,		0,
					dx,				dy,				0,
					dx + ws,		dy,				0,
					dx + ws,		dy + Girth,		-1
			endif
		else
			put	dx + ws,	dy,			0,
				dx + ws,	dy + ds,	0,
				dx,			dy + ds,	0,
				dx,			dy,			0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_ISHAPE then
		dx = -ws / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 then
			if gs_show_edge_fillet & (rr > EPS) then
				edgeStatus = (rr > EPS)
				put	dx + ws,   				dy,				0,
					dx + ws, 				dy + ft,		0,
					dx + ws-(ws-wt)/2+rr,	dy + ft,		edgeStatus,
					rr,						-90,			2000 + edgeStatus,
					dx + ws-(ws-wt)/2,		dy + ft+rr,		edgeStatus,
					dx + ws-(ws-wt)/2,		dy + ds-ft-rr,	edgeStatus,
					rr,						-90,			2000 + edgeStatus,
					dx + ws-(ws-wt)/2+rr,	dy + ds-ft,		edgeStatus,
					dx + ws,				dy + ds-ft,		0,
					dx + ws,				dy + ds,		0,
					dx,						dy + ds,		0,
					dx,						dy + ds-ft,		0,
					dx + (ws-wt)/2-rr,		dy + ds-ft,		edgeStatus,
					rr,						-90,			2000 + edgeStatus,
					dx + (ws-wt)/2,			dy + ds-ft-rr,	edgeStatus,
					dx + (ws-wt)/2,			dy + ft+rr,		edgeStatus,
					rr,						-90,			2000 + edgeStatus,
					dx + (ws-wt)/2-rr,		dy + ft,		edgeStatus,
					dx,						dy + ft,		0,
					dx,						dy,				0,
					dx + ws,				dy,				-1
			else
				put	dx + ws,   			dy,				0,
					dx + ws, 			dy + ft,		0,
					dx + ws-(ws-wt)/2,	dy + ft,		0,
					dx + ws-(ws-wt)/2,	dy + ds-ft,		0,
					dx + ws,			dy + ds-ft,		0,
					dx + ws,			dy + ds,		0,
					dx,					dy + ds,		0,
					dx,					dy + ds-ft,		0,
					dx + (ws-wt)/2,		dy + ds-ft,		0,
					dx + (ws-wt)/2,		dy + ft,		0,
					dx,					dy + ft,		0,
					dx,					dy,				0,
					dx + ws,   			dy,				-1
			endif
		else
			put	dx,			dy,		0,
				dx + ws,	dy,		0,
				dx + ws,	dy + ds,0,
				dx,			dy + ds,0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_LSHAPE then
		dx = -ws / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 then
			if gs_show_edge_fillet & (rr > EPS | tr > EPS) then
				edgeStatus1 = (rr > EPS)
				edgeStatus2 = (tr > EPS)
				put	dx,			dy,			0,
					dx + ws,	dy,			0,
					dx + ws,	dy + wt-tr,	edgeStatus2,
					tr,			90,			2000 + edgeStatus2, ! first arc
					dx + ws-tr,	dy + wt,	edgeStatus2,
					dx + wt+rr,	dy + wt,	edgeStatus1,
					rr,			-90,		2000 + edgeStatus1, ! fillet arc
					dx + wt,	dy + wt+rr,	edgeStatus1,
					dx + wt,	dy + ds-tr,	edgeStatus2,
					tr,			90,			2000 + edgeStatus2, ! second arc
					dx + wt-tr,	dy + ds,	edgeStatus2,
					dx,			dy + ds,	0,
					dx,			dy,			-1
			else
				put	dx,			dy,			0,
					dx + ws,	dy,			0,
					dx + ws,	dy + wt,	0,
					dx + wt,	dy + wt,	0,
					dx + wt,	dy + ds,	0,
					dx,			dy + ds,	0,
					dx,			dy,			-1
			endif
		else
			put	dx,			dy,			0,
				dx + ws,	dy,			0,
				dx + ws,	dy + wt,	0,
				dx + wt,	dy + wt,	0,
				dx + wt,	dy + ds,	0,
				dx,			dy + ds,	0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_TSHAPE then
		dx = -ws / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 then
			if gs_show_edge_fillet & (rr > EPS | tr > EPS | etr > EPS) then
				edgeStatus1 = (rr > EPS)
				edgeStatus2 = (tr > EPS)
				edgeStatus3 = (etr > EPS)
				put	dx + ws,			dy + ds,		0,
					dx + ws,			dy + ds-ft+tr,	edgeStatus2,
					tr,					-90,			2000 + edgeStatus2,
					dx + ws-tr,			dy + ds-ft,		edgeStatus2,
					dx + ws/2+wt/2+rr,	dy + ds-ft,		edgeStatus1,
					rr,					90,				2000 + edgeStatus1,
					dx + ws/2+wt/2,		dy + ds-ft-rr,	edgeStatus1,
					dx + ws/2+wt/2,		dy + etr,		edgeStatus3,
					etr,				-90,			2000 + edgeStatus3,
					dx + ws/2+wt/2-etr,	dy,				edgeStatus3,
					dx + ws/2-wt/2+etr,	dy,				edgeStatus3,
					etr,				-90,			2000 + edgeStatus3,
					dx + ws/2-wt/2,		dy + etr,		edgeStatus3,
					dx + ws/2-wt/2,		dy + ds-ft-rr,	edgeStatus1,
					rr,					90,				2000 + edgeStatus1,
					dx + ws/2-wt/2-rr,	dy + ds-ft,		edgeStatus1,
					dx + tr,			dy + ds-ft,		edgeStatus2,
					tr,					-90,			2000 + edgeStatus2,
					dx,					dy + ds-ft+tr,	edgeStatus2,
					dx,					dy + ds,		0,
					dx + ws,			dy + ds,		-1
			else
				put	dx + ws,		dy + ds,	0,
					dx + ws,		dy + ds-ft,	0,
					dx + ws/2+wt/2,	dy + ds-ft,	0,
					dx + ws/2+wt/2,	dy,			0,
					dx + ws/2-wt/2,	dy,			0,
					dx + ws/2-wt/2,	dy + ds-ft,	0,
					dx,				dy + ds-ft,	0,
					dx,				dy + ds,	0,
					dx + ws,		dy + ds,	-1
			endif
		else
			put	dx + ws,		dy + ds,	0,
				dx + ws,		dy + ds-ft,	0,
				dx + ws/2+wt/2,	dy + ds-ft,	0,
				dx + ws/2+wt/2,	dy,			0,
				dx + ws/2-wt/2,	dy,			0,
				dx + ws/2-wt/2,	dy + ds-ft,	0,
				dx,				dy + ds-ft,	0,
				dx,				dy + ds,	0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_USHAPE then
		dx = -ws / 2
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 then
			if gs_show_edge_fillet & (rr > EPS | tr > EPS) then
				edgeStatus1 = (rr > EPS)
				edgeStatus2 = (tr > EPS)
				put	dx,			dy,				0,
					dx,			dy + ds,		0,
					dx + ws,	dy + ds,		0,
					dx + ws,	dy + ds-ft+tr,	edgeStatus2,
					tr,			-90,			2000 + edgeStatus2,
					dx + ws-tr,	dy + ds-ft,		edgeStatus2,
					dx + wt+rr,	dy + ds-ft,		edgeStatus1,
					rr,			90,				2000 + edgeStatus1,
					dx + wt,	dy + ft+rr,		edgeStatus1,
					rr,			90,				2000 + edgeStatus1,
					dx + wt+rr,	dy + ft,		edgeStatus1,
					dx + ws-tr,	dy + ft,		edgeStatus2,
					tr,			-90,			2000 + edgeStatus2,
					dx + ws,	dy + ft-tr,		edgeStatus2,
					dx + ws,	dy,				0,
					dx,			dy,				-1
			else
				put	dx,			dy,				0,
					dx,			dy + ds,		0,
					dx + ws,	dy + ds,		0,
					dx + ws,	dy + ds-ft,		0,
					dx + wt,	dy + ds-ft,		0,
					dx + wt,	dy + ft,		0,
					dx + ws,	dy + ft,		0,
					dx + ws,	dy,				0,
					dx,			dy,				-1
			endif
		else
			put	dx + ws,	dy,				0,
				dx,			dy,				0,
				dx,			dy + ds,		0,
				dx + ws,	dy + ds,		0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_ZSHAPE then
		if bNeedOperationToMigrate then
			dx = -ws/2
		else
			dx = -ws + wt / 2
		endif
		dy = -ds / 2

		if GLOB_SCRIPT_TYPE = 3 then
			if gs_show_edge_fillet & (rr > EPS | tr > EPS) then
				edgeStatus1 = (rr > EPS)
				edgeStatus2 = (tr > EPS)
				put	dx + 2*ws-wt,		dy,				0,
					dx + 2*ws-wt,		dy + ft-tr,		edgeStatus2,
					tr,					90,				2000 + edgeStatus2,
					dx + 2*ws-wt-tr,	dy + ft,		edgeStatus2,
					dx + ws+rr,			dy + ft,		edgeStatus1,
					rr,					-90,			2000 + edgeStatus1,
					dx + ws,			dy + ft+rr,		edgeStatus1,
					dx + ws,			dy + ds,		0,
					dx,					dy + ds,		0,
					dx,					dy + ds-ft+tr,	edgeStatus2,
					tr,					90,				2000 + edgeStatus2,
					dx + tr,			dy + ds-ft,		edgeStatus2,
					dx + ws-wt-rr,		dy + ds-ft,		edgeStatus1,
					rr,					-90,			2000 + edgeStatus1,
					dx + ws-wt,			dy + ds-ft-rr,	edgeStatus1,
					dx + ws-wt,			dy,				0,
					dx + 2*ws-wt,		dy,				-1
			else
				put	dx + 2*ws-wt,	dy,				0,
					dx + 2*ws-wt,	dy + ft,		0,
					dx + ws,		dy + ft,		0,
					dx + ws,		dy + ds,		0,
					dx,				dy + ds,		0,
					dx,				dy + ds-ft,		0,
					dx + ws-wt,		dy + ds-ft,		0,
					dx + ws-wt,		dy,				0,
					dx + 2*ws-wt,	dy,				-1
			endif
		else
			put	dx + 2*ws-wt,		dy,				0,
				dx + 2*ws-wt,		dy + ft,		0,
				dx + ws,			dy + ft,		0,
				dx + ws,			dy + ds,		0,
				dx,					dy + ds,		0,
				dx,					dy + ds-ft,		0,
				dx + ws-wt,			dy + ds-ft,		0,
				dx + ws-wt,			dy,				0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_CRANERAILASHAPE then
		dx = -BaseWidth2 / 2
		dy = -h/2

		if not(gs_show_edge_fillet) then tr = 0

		edgeStatus = (tr > EPS)

		if GLOB_SCRIPT_TYPE = 3 then
			put	dx,									dy,					0,
				dx + BaseWidth2,					dy,					0,
				dx + BaseWidth2,					dy + BaseDepth1,	0,
				dx + BaseWidth2/2+BaseWidth4/2,		dy + BaseDepth3,	0,
				dx + BaseWidth2/2+wt/2,				dy + BaseDepth2,	0,
				dx + BaseWidth2/2+wt/2,				dy + h-HeadDepth2,	0,
				dx + BaseWidth2/2+HeadWidth/2,		dy + h-HeadDepth3,	0,
				dx + BaseWidth2/2+HeadWidth/2,		dy + h-tr,			edgeStatus,
				tr,									90,					2000 + edgeStatus,
				dx + BaseWidth2/2+HeadWidth/2-tr,	dy + h,				edgeStatus,
				dx + BaseWidth2/2-HeadWidth/2+tr,	dy + h,				edgeStatus,
				tr,									90,					2000 + edgeStatus,
				dx + BaseWidth2/2-HeadWidth/2,		dy + h-tr,			edgeStatus,
				dx + BaseWidth2/2-HeadWidth/2,		dy + h-HeadDepth3,	0,
				dx + BaseWidth2/2-wt/2,				dy + h-HeadDepth2,	0,
				dx + BaseWidth2/2-wt/2,				dy + BaseDepth2,	0,
				dx + BaseWidth2/2-BaseWidth4/2,		dy + BaseDepth3,	0,
				dx,									dy + BaseDepth1,	0,
				dx,									dy,					-1
		else
			put	dx,								dy,		0,
				dx + BaseWidth2,				dy,		0,
				dx + BaseWidth2/2+HeadWidth/2,	dy + h,	0,
				dx + BaseWidth2/2-HeadWidth/2,	dy + h,	0
		endif
	endif

	if iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE then

		dx = -ws / 2
		dy = -h/2

		if not(gs_show_edge_fillet) then tr = 0

		edgeStatus = (tr > EPS)

		if GLOB_SCRIPT_TYPE = 3 then
			put	dx,				dy,					0,
				dx + ws,		dy,					0,
				dx + ws,		dy + BaseDepth1,	0,
				dx + ws/2+wt/2,	dy + BaseDepth2,	0,
				dx + ws/2+wt/2,	dy + h-HeadDepth2,	0,
				dx + ws,		dy + h-HeadDepth3,	0,
				dx + ws,		dy + h-tr,			edgeStatus,
				tr,				90,					2000 + edgeStatus,
				dx + ws-tr,		dy + h,				edgeStatus,
				dx + tr,		dy + h,				edgeStatus,
				tr,				90,					2000 + edgeStatus,
				dx,				dy + h-tr,			edgeStatus,
				dx,				dy + h-HeadDepth3,	0,
				dx + ws/2-wt/2,	dy + h-HeadDepth2,	0,
				dx + ws/2-wt/2,	dy + BaseDepth2,	0,
				dx,				dy + BaseDepth1,	0,
				dx,				dy,					-1
		else
			put	dx,			dy,		0,
				dx + ws,	dy,		0,
				dx + ws,	dy + h,	0,
				dx,			dy + h,	0
		endif
	endif
endif

"MasterEnd":
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
hideparameter "A", "B" !, "ZZYZX"

if iEntityType = ENTITY_BEAM				then values "Ifc2x2RootType" "IfcBeam"
if iEntityType = ENTITY_COLUMN				then values "Ifc2x2RootType" "IfcColumn"
if iEntityType = ENTITY_DISCRETE_ACCESSORY	then values "Ifc2x2RootType" "IfcDiscreteAccessory"
if iEntityType = ENTITY_FOOTING				then values "Ifc2x2RootType" "IfcFooting"
if iEntityType = ENTITY_MEMBER				then values "Ifc2x2RootType" "IfcMember"
if iEntityType = ENTITY_OPENING				then values "Ifc2x2RootType" "IfcIfcOpening"
if iEntityType = ENTITY_PILE				then values "Ifc2x2RootType" "IfcPile"
if iEntityType = ENTITY_PLATE				then values "Ifc2x2RootType" "IfcPlate"


values "ProfileType" `ПРЯМОУГОЛЬНИК`, `RECTANGLEHOLLOW`,
			`CIRCLE`, `CIRCLEHOLLOW`,
			`ELLIPSE`,
			`TRAPEZIUM`,
			`CSHAPE`, `ISHAPE`, `LSHAPE`, `TSHAPE`, `USHAPE`, `ZSHAPE`,
			`CRANERAILASHAPE`, `CRANERAILFSHAPE`,
			`ARBITRARY`

lock "ProfileType"

if GLOB_MODPAR_NAME = "ProfileType" then
	iProfileType = ID_PROFILETYPE_ARBITRARY
	if ProfileType = `ПРЯМОУГОЛЬНИК`		then iProfileType = ID_PROFILETYPE_RECTANGLE
	if ProfileType = `RECTANGLEHOLLOW`	then iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW
	if ProfileType = `ROUNDEDRECTANGLE`	then iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE
	if ProfileType = `CIRCLE`			then iProfileType = ID_PROFILETYPE_CIRCLE
	if ProfileType = `CIRCLEHOLLOW`		then iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW
	if ProfileType = `ELLIPSE`			then iProfileType = ID_PROFILETYPE_ELLIPSE
	if ProfileType = `TRAPEZIUM`		then iProfileType = ID_PROFILETYPE_TRAPEZIUM
	if ProfileType = `CSHAPE`			then iProfileType = ID_PROFILETYPE_CSHAPE
	if ProfileType = `ISHAPE`			then iProfileType = ID_PROFILETYPE_ISHAPE
	if ProfileType = `LSHAPE`			then iProfileType = ID_PROFILETYPE_LSHAPE
	if ProfileType = `TSHAPE`			then iProfileType = ID_PROFILETYPE_TSHAPE
	if ProfileType = `USHAPE`			then iProfileType = ID_PROFILETYPE_USHAPE
	if ProfileType = `ZSHAPE`			then iProfileType = ID_PROFILETYPE_ZSHAPE
	if ProfileType = `CRANERAILASHAPE`	then iProfileType = ID_PROFILETYPE_CRANERAILASHAPE
	if ProfileType = `CRANERAILFSHAPE`	then iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE
	parameters iProfileType = iProfileType
else
	ProfileType = `ARBITRARY`
	if iProfileType = ID_PROFILETYPE_RECTANGLE			then ProfileType = `ПРЯМОУГОЛЬНИК`
	if iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW	then ProfileType = `RECTANGLEHOLLOW`
	if iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE	then ProfileType = `ROUNDEDRECTANGLE`
	if iProfileType = ID_PROFILETYPE_CIRCLE				then ProfileType = `CIRCLE`
	if iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW		then ProfileType = `CIRCLEHOLLOW`
	if iProfileType = ID_PROFILETYPE_ELLIPSE			then ProfileType = `ELLIPSE`
	if iProfileType = ID_PROFILETYPE_TRAPEZIUM			then ProfileType = `TRAPEZIUM`
	if iProfileType = ID_PROFILETYPE_CSHAPE				then ProfileType = `CSHAPE`
	if iProfileType = ID_PROFILETYPE_ISHAPE				then ProfileType = `ISHAPE`
	if iProfileType = ID_PROFILETYPE_LSHAPE				then ProfileType = `LSHAPE`
	if iProfileType = ID_PROFILETYPE_TSHAPE				then ProfileType = `TSHAPE`
	if iProfileType = ID_PROFILETYPE_USHAPE				then ProfileType = `USHAPE`
	if iProfileType = ID_PROFILETYPE_ZSHAPE				then ProfileType = `ZSHAPE`
	if iProfileType = ID_PROFILETYPE_CRANERAILASHAPE	then ProfileType = `CRANERAILASHAPE`
	if iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE	then ProfileType = `CRANERAILFSHAPE`
	parameters ProfileType = ProfileType
endif


if not(iProfileType = ID_PROFILETYPE_ARBITRARY) then
	hideparameter "Profile", "ProfileNr"
endif

if not(iProfileType = ID_PROFILETYPE_TSHAPE) then
	hideparameter "etr"
endif

if	iProfileType = ID_PROFILETYPE_RECTANGLE |\
	iProfileType = ID_PROFILETYPE_CIRCLE |\
	iProfileType = ID_PROFILETYPE_ELLIPSE then
	hideparameter "wt", "ft",
				  "rr", "tr"
endif

if iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW then
	hideparameter "ft", "rr", "tr"
else
	hideparameter "outr", "inr"
endif

if iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE then
	hideparameter "ft", "rr", "tr"
else
	hideparameter "outr", "inr"
endif

if not(iProfileType = ID_PROFILETYPE_ELLIPSE) then
	hideparameter "SemiAxis1", "SemiAxis2"
else
	hideparameter "ws", "ds"
endif

if not(iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW) then
	hideparameter "bs"
else
	hideparameter "ws"
endif

if not(iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE) then
	hideparameter "bs"
else
	hideparameter "ws"
endif

if not(iProfileType = ID_PROFILETYPE_TRAPEZIUM) then
	hideparameter "TopXDim", "TopXOffset"
endif

if iProfileType = ID_PROFILETYPE_TRAPEZIUM then
	hideparameter "wt", "ft", "Girth", "tr", "rr"
endif

if not(iProfileType = ID_PROFILETYPE_CSHAPE) then
	hideparameter "Girth"
endif

if iProfileType = ID_PROFILETYPE_ISHAPE then
	hideparameter "tr"
endif

if iProfileType = ID_PROFILETYPE_LSHAPE then
	hideparameter "ft"
endif

if iProfileType = ID_PROFILETYPE_CSHAPE then
	hideparameter "ft", "tr"
endif

if iProfileType = ID_PROFILETYPE_ZSHAPE then
	hideparameter "w"
endif

if iProfileType = ID_PROFILETYPE_ELLIPSE then
	hideparameter "tr", "rr", "ws", "ds", "wt"
endif

if iProfileType = ID_PROFILETYPE_CIRCLE then
	hideparameter "tr", "rr", "ws", "wt"
endif

if iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW then
	hideparameter "tr", "rr", "ws", "ft"
endif

if	not(iProfileType = ID_PROFILETYPE_CRANERAILASHAPE) &\
	not(iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE) then
	hideparameter "h", "HeadWidth", "HeadDepth2", "HeadDepth3", "BaseWidth2", "BaseWidth4", "BaseDepth1", "BaseDepth2", "BaseDepth3"
endif


if	iProfileType = ID_PROFILETYPE_CRANERAILASHAPE |\
	iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE then
	hideparameter "ws", "rr", "ft", "ds"
endif

if iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE then
	hideparameter "BaseWidth4", "HeadWidth", "BaseDepth3"
endif

parameters exz = ZZYZX

lock "exx", "exy", "exz"


! ==============================================================================
! Calculating Top and Bottom Level
! ==============================================================================

dim bbb[][3]
for i=1 to nsp/3
	bbb[i][1] = get(1)
	bbb[i][2] = get(1)
	bbb[i][3] = get(1)
next i

DIM cx[3]: DIM cy[3]: DIM cz[3] ! The Coordinate System
DIM trm[3] ! The Translation Vector
DIM m[4][4] ! The Last Rotation's Matrix
DIM summ[4][4] ! The Whole Rotation Matrix
DIM temp[4][4] ! Temporary Matrix

gosub 100	! Init Coordinate System

!OBJECT LOCAL SYSTEM
put ry:	gosub 122	! roty
put rx:	gosub 121	! rotx

!EXTRUSION LOCAL SYSTEM
put expx, expy, expz:  gosub 110	! add

put exrz:	gosub 123	! rotz
put exry:	gosub 122	! roty
put exrx:	gosub 121	! rotx

!LocalTran
put ltpx, ltpy, 0:  gosub 110	! add
put ltrot:	gosub 123	! rotz

minZ = 1
maxZ = 0

for i=1 to vardim1(bbb)
	px = bbb[i][1]
	py = bbb[i][2]

	put px, py, 0
	gosub 210 ! Transform Point with summ[4][4] and trm[3]
	vx = get(1)
	vy = get(1)
	vz = get(1)

	if i=1 then
		minZ = vz
		maxZ = vz
	else
		if vz < minZ then minZ = vz
		if vz > maxZ then maxZ = vz
	endif

	put px + exx, py + exy, exz
	gosub 210 ! Transform Point with summ[4][4] and trm[3]
	vx = get(1)
	vy = get(1)
	vz = get(1)

	if vz < minZ then minZ = vz
	if vz > maxZ then maxZ = vz
next i

parameters	ac_bottomlevel	= minZ,
			ac_toplevel		= maxZ


! ==============================================================================
END
! ==============================================================================


100:
!!! ***** Init Coordinate System

! Reset Coordinate Vectors
cx[1]=1: cx[2]=0: cx[3]=0
cy[1]=0: cy[2]=1: cy[3]=0
cz[1]=0: cz[2]=0: cz[3]=1

! Set Zero Translation
trm[1]=0: trm[2]=0: trm[3]=0

! Set Identity Matrix
FOR i=1 TO 4
	FOR j=1 TO 4
		IF i=j THEN
			m[i][j]=1
			summ[i][j]=1
		ELSE
			m[i][j]=0
			summ[i][j]=0
		ENDIF
	NEXT j
NEXT i
RETURN

110:
!!! Translation x,y,z

IF NSP<>3 THEN PRINT "Something Wrong !"

! Transform vector to the current coordinate system
GOSUB 201   ! Transform Point with summ[4][4]

x_hpts = GET(1)
y_hpts = GET(1)
z_hpts = GET(1)

! Sum Translation Vector
trm[1] = trm[1] + x_hpts
trm[2] = trm[2] + y_hpts
trm[3] = trm[3] + z_hpts

RETURN

111:
!!! Translation x

IF NSP<>1 THEN PRINT "Something Wrong !"

x_hpts=GET(1)
PUT x_hpts, 0, 0
GOTO 110

112:
!!! Translation y

IF NSP<>1 THEN PRINT "Something Wrong !"

y_hpts=GET(1)
PUT 0, y_hpts, 0
GOTO 110

113:
!!! Translation z

IF NSP<>1 THEN PRINT "Something Wrong !"

z_hpts=GET(1)
PUT 0, 0, z_hpts
GOTO 110

120:
!!! Rotation around Axis with Angle

IF NSP<>4 THEN PRINT "Something Wrong !"

! Transform axis to the current coordinate system
GOSUB 201   ! Transform Point with summ[4][4]

alfa_hpts = -GET(1)
x_hpts = GET(1)
y_hpts = GET(1)
z_hpts = GET(1)

GOSUB 301   ! Rotation Axis and Angle to Quaternion
GOSUB 304   ! Quaternion to Rotation Matrix
GOSUB 202   ! Transform Coordinate System with Matrix m[4][4]
GOSUB 203   ! Transform Summ Matrix

RETURN

121:
!!! Rotation around X axis

IF NSP<>1 THEN PRINT "Something Wrong !"

x_hpts = cx[1]
y_hpts = cx[2]
z_hpts = cx[3]
alfa_hpts = -GET(1)

GOSUB 301   ! Rotation Axis and Angle to Quaternion
GOSUB 304   ! Quaternion to Rotation Matrix
GOSUB 202   ! Transform Coordinate System with Matrix m[4][4]
GOSUB 203   ! Transform Summ Matrix

RETURN

122:
!!! Rotation around Y axis

IF NSP<>1 THEN PRINT "Something Wrong !"

x_hpts = cy[1]
y_hpts = cy[2]
z_hpts = cy[3]
alfa_hpts = -GET(1)

GOSUB 301   ! Rotation Axis and Angle to Quaternion
GOSUB 304   ! Quaternion to Rotation Matrix
GOSUB 202   ! Transform Coordinate System with Matrix m[4][4]
GOSUB 203   ! Transform Summ Matrix

RETURN

123:
!!! Rotation around Z axis

IF NSP<>1 THEN PRINT "Something Wrong !"

x_hpts = cz[1]
y_hpts = cz[2]
z_hpts = cz[3]
alfa_hpts = -GET(1)

GOSUB 301   ! Rotation Axis and Angle to Quaternion
GOSUB 304   ! Quaternion to Rotation Matrix
GOSUB 202   ! Transform Coordinate System with Matrix m[4][4]
GOSUB 203   ! Transform Summ Matrix

RETURN

!!! ******************************************
!!! Matrix Functions
!!! ******************************************

200:
!!! Transform Point with m[4][4]

x_hpts=GET(1): y_hpts=GET(1): z_hpts=GET(1): h_hpts=1
PUT x_hpts*m[1][1] + y_hpts*m[2][1] + z_hpts*m[3][1] + h_hpts*m[4][1] ! X
PUT x_hpts*m[1][2] + y_hpts*m[2][2] + z_hpts*m[3][2] + h_hpts*m[4][2] ! Y
PUT x_hpts*m[1][3] + y_hpts*m[2][3] + z_hpts*m[3][3] + h_hpts*m[4][3] ! Z
!PUT x_hpts*m[1][4] + y_hpts*m[2][4] + z_hpts*m[3][4] + h_hpts*m[4][4] ! h

RETURN

201:
!!! Transform Point with summ[4][4]

x_hpts=GET(1): y_hpts=GET(1): z_hpts=GET(1): h_hpts=1
PUT x_hpts*summ[1][1] + y_hpts*summ[2][1] + z_hpts*summ[3][1] + h_hpts*summ[4][1] ! X
PUT x_hpts*summ[1][2] + y_hpts*summ[2][2] + z_hpts*summ[3][2] + h_hpts*summ[4][2] ! Y
PUT x_hpts*summ[1][3] + y_hpts*summ[2][3] + z_hpts*summ[3][3] + h_hpts*summ[4][3] ! Z
!PUT x_hpts*summ[1][4] + y_hpts*summ[2][4] + z_hpts*summ[3][4] + h_hpts*summ[4][4] ! h

RETURN

202:
!!! Transform Coordinate System

PUT cx[1],cx[2],cx[3]
GOSUB 200
cx[1] = GET(1)
cx[2] = GET(1)
cx[3] = GET(1)

PUT cy[1],cy[2],cy[3]
GOSUB 200
cy[1] = GET(1)
cy[2] = GET(1)
cy[3] = GET(1)

PUT cz[1],cz[2],cz[3]
GOSUB 200
cz[1] = GET(1)
cz[2] = GET(1)
cz[3] = GET(1)

RETURN

203:
!!! Transform Matrix

! Copy summ[] to temp[]
FOR i=1 TO 4
  FOR j=1 TO 4
	  temp[i][j]=summ[i][j]
  NEXT j
NEXT i

! Transform summ[] and m[]
FOR i=1 TO 4
  FOR j=1 TO 4
	  summ[i][j]=0
	  FOR k=1 TO 4
		  summ[i][j]= summ[i][j]+temp[i][k]*m[k][j]
	  NEXT k
  NEXT j
NEXT i

RETURN

210:
!!! Transform Point with summ[4][4] and trm[3]

GOSUB 201   ! Transform Point with summ[4][4]

x_hpts=GET(1): y_hpts=GET(1): z_hpts=GET(1)

PUT trm[1] + x_hpts
PUT trm[2] + y_hpts
PUT trm[3] + z_hpts

RETURN

!!! ******************************************
!!! Quaternion Functions
!!! ******************************************

300:
!!! ***** Euler angles to Quaternion

cr_hpts = cos(x_hpts / 2)
cp_hpts = cos(y_hpts / 2)
cy_hpts = cos(z_hpts / 2)

sr_hpts = sin(x_hpts / 2)
sp_hpts = sin(y_hpts / 2)
sy_hpts = sin(z_hpts / 2)

cpcy_hpts = cp_hpts * cy_hpts
spsy_hpts = sp_hpts * sy_hpts

qW_hpts = cr_hpts * cpcy_hpts + sr_hpts * spsy_hpts
qX_hpts = sr_hpts * cpcy_hpts - cr_hpts * spsy_hpts
qY_hpts = cr_hpts * sp_hpts * cy_hpts + sr_hpts * cp_hpts * sy_hpts
qZ_hpts = cr_hpts * cp_hpts * sy_hpts - sr_hpts * sp_hpts * cy_hpts
RETURN

301:
!!! ***** Rotation Axis and Angle to Quaternion

temp_hpts = x_hpts * x_hpts + y_hpts * y_hpts + z_hpts * z_hpts
dist_hpts = SIN(alfa_hpts/2) / SQR(temp_hpts)

qX_hpts = x_hpts * dist_hpts
qY_hpts = y_hpts * dist_hpts
qZ_hpts = z_hpts * dist_hpts
qW_hpts = COS(alfa_hpts/2)
RETURN

304:
!!! ***** Quaternion to Rotation Matrix
x2_hpts = qx_hpts + qx_hpts: y2_hpts = qy_hpts + qy_hpts: z2_hpts = qz_hpts + qz_hpts
xx_hpts = qx_hpts * x2_hpts: xy_hpts = qx_hpts * y2_hpts: xz_hpts = qx_hpts * z2_hpts
yy_hpts = qy_hpts * y2_hpts: yz_hpts = qy_hpts * z2_hpts: zz_hpts = qz_hpts * z2_hpts
wx_hpts = qw_hpts * x2_hpts: wy_hpts = qw_hpts * y2_hpts: wz_hpts = qw_hpts * z2_hpts

m[1][1] = 1 - (yy_hpts + zz_hpts)
m[1][2] = xy_hpts - wz_hpts
m[1][3] = xz_hpts + wy_hpts
m[1][4] = 0

m[2][1] = xy_hpts + wz_hpts
m[2][2] = 1 - (xx_hpts + zz_hpts)
m[2][3] = yz_hpts - wx_hpts
m[2][4] = 0

m[3][1] = xz_hpts - wy_hpts
m[3][2] = yz_hpts + wx_hpts
m[3][3] = 1 - (xx_hpts + yy_hpts)
m[3][4] = 0

m[4][1] = 0
m[4][2] = 0
m[4][3] = 0
m[4][4] = 1
RETURN


]]>
</Script_VL>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Libraryflobals-km"]]></MName>
		<MainGUID>2087989F-7AAB-43CC-9F4A-8CC8975EA122</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY</Type>
		<Version>4.0</Version>
	</License>
</Copyright>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

</Symbol>
