!!!"read_sort":!!!	call "macro_get_sort" PARAMETERS sort_data = sort_data RETURNED_PARAMETERS sort_data!!!	if haskey(sort_data.error) then!!!		if sort_data.error <> "ok" then!!!			print("Сортамент прочитан с ошибкой")!!!			goto "m_end"!!!		else!!!			parameters sort_data = sort_data!!!		endif!!!	else!!!		print("Сортамент не прочитан")!!!		goto "m_end"!!!	endif!!!return!!!values{2} "name_prof_bort" sort_data.inx_name_profs,  sort_data.name_profs!!!if haskey(sort_data.tip_p[name_prof_bort].values) then!!!	values{2} "tip_p_bort" sort_data.tip_p[name_prof_bort].inx_values, sort_data.tip_p[name_prof_bort].values!!!	if haskey(sort_data.tip_p[name_prof_bort].profiles[tip_p_bort].names) then!!!		values{2} "profile_bort" sort_data.tip_p[name_prof_bort].profiles[tip_p_bort].inx_names, sort_data.tip_p[name_prof_bort].profiles[tip_p_bort].names!!!	endif!!!endifdict _datan = REQUEST ("Name_of_main", "", main_name)_data.error = main_name + " : "!Проверим версию сортамента из полученного словаря и сравним с версией в файлахgosub "read_version"sort_version = 0 : if haskey(sort_data.version) then sort_version = sort_data.versionis_read = 0 : if haskey(sort_data.error) then is_read = (sort_data.error = "ok")!Если версии совпадают и ошибок чтения не было - смело выходимflag_read = 1if abs(sort_version - version)<0.01 and is_read then flag_read = 0if sort_version>0 and abs(version)<0.0001 and is_read then flag_read = 0if flag_read = 0 then goto "m_end"!Возвращает словарь с профилямиdim tname_prof[]dim iname_prof[] : i=0i=i+1 : iname_prof[i]=1 : tname_prof[i] = "Круглая труба"i=i+1 : iname_prof[i]=2 : tname_prof[i] = "Квадратная труба"i=i+1 : iname_prof[i]=3 : tname_prof[i] = "Швеллер"i=i+1 : iname_prof[i]=4 : tname_prof[i] = "Двутавр"i=i+1 : iname_prof[i]=5 : tname_prof[i] = "Уголок"i=i+1 : iname_prof[i]=6 : tname_prof[i] = "Лист"i=i+1 : iname_prof[i]=8 : tname_prof[i] = "Уголок гнутый"i=i+1 : iname_prof[i]=9 : tname_prof[i] = "Швеллер гнутый"_data.name_profs = tname_prof_data.inx_name_profs = iname_profgosub "read_stal"gosub "read_tip"gosub "read_profile"_data.error = "ok"_data.version = version"m_end":if flag_read = 0 then	exit sort_dataelse	if _data.error = "ok" then		print(main_name + " : Сортамент прочитан, версия "+ str("%.0", version))	else		print(main_name + " : Ошибка чтения сортамента, версия "+ str("%.0", version))	endif	sort_data = _data	parameters sort_data = sort_data	exit sort_dataendif"read_version":	var1 = 0 : version = 0	ch1 = open("text", "sortament_version.txt", "separator='\t', mode=ro, LIBRARY")	n = input (ch1, 1, 1, var1)	if vartype(var1)=1 then version = var1	close ch1return"read_stal":	var1 = " ": var2 = " " : _data.stal.values[1] = ""	ch1 = open("text", "Сталь.txt", "separator='\t', mode=ro, LIBRARY")	i = 1 : j = 1	11:	n = input (ch1, i, 1, var1, var2)	if n <> -1 then		if vartype(var1)=2 and vartype(var2)=2 then			_data.stal.values[j] = var1			_data.stal.gost[j] = var2			_data.stal.inx_values[j] = j			j = j + 1		endif		i = i + 1		goto 11	else		goto "close1"	endif	"close1":	close ch1return"read_tip":	var1 = " ": var2 = " ": var3 = " ": var4 = " ": var5 = " "	ch1 = open("text", "Сортаменты.txt", "separator='\t', mode=ro, LIBRARY")	i = 2: j = 1	1:	n = input (ch1, i, 1, var1, var2, var3, var4, var5)	if n <> -1 then		inx = 0		for kk=1 to vardim1(tname_prof)			if var5 = tname_prof[kk] then				inx = iname_prof[kk]				kk = vardim1(tname_prof)			endif		next kk		if inx > 0 then			if haskey(_data.tip_p[inx].values) then 				j = vardim1(_data.tip_p[inx].values)+1			else				j = 1			endif			_data.tip_p[inx].values[j] = var1 + " "			_data.tip_p[inx].inx_values[j] = j			_data.tip_p[inx].f_name[j] = var3 + ".txt"			_data.tip_p[inx].obozn[j] = var2 + " "			_data.tip_p[inx].naen[j] = var5		endif		i = i + 1		goto 1	else		goto "close"	endif	"close":	close ch1return"read_profile":	f_name = ""	for i=1 to vardim1(iname_prof)		inx_prof = iname_prof[i]		if haskey(_data.tip_p[inx_prof].inx_values) then			for j=1 to vardim1(_data.tip_p[inx_prof].inx_values)				inx_tip = _data.tip_p[inx_prof].inx_values[j]				f_name = _data.tip_p[inx_prof].f_name[inx_tip]				ch2 = open("text", f_name, "separator='\t', mode=ro, LIBRARY")				k = 2 : m = 1				2:				v1 = ""				n = input(ch2, k, 2, v1)				if n <> -1 then					if vartype(v1)=1 then						if abs(v1)>0 then v1 = str("%.2", v1)					endif					if vartype(v1)=2 then						if strlen(v1)>1 then							_data.tip_p[inx_prof].profiles[inx_tip].names[m] = v1							_data.tip_p[inx_prof].profiles[inx_tip].inx_names[m] = k							m = m + 1						endif					endif					k = k + 1					goto 2				else					goto "close2"				endif				"close2":				close ch2			next j		endif	next ireturn