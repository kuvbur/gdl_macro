!type_arc = 1!Входные параметры:!x1, y1 - Т. начала отрезка 1!x2, y2 - Т. пересечения отрезков 1 и 2!x3, y3 - Т. начала отрезка 2!Результат:!ipx, ipy - Т. центра дуги!px1, py1 - Т. касания дуги на отрезке 1!px2, py2 - Т. касания дуги на отрезке 2!ang_arc - Центральный угол дуни!l_arc - Длина дуги!dr - Величина уменьшения длины отрезка!type_arc = 3!Входные параметры:!x1, y1 - Т. начала отрезка 1!x2, y2 - Т. центра дуги!x3, y3 - Т. начала отрезка 2!Результат:!ipx, ipy - Т. центра дуги!px1, py1 - Т. касания дуги на отрезке 1!px2, py2 - Т. касания дуги на отрезке 2!ang_arc - Центральный угол дуни!l_arc - Длина дуги!dr - Величина уменьшения длины отрезкаdbg = 0EPS = 0.0001out_txt = "-"ipx = 0 : ipy = 0px1 = 0 : py1 = 0px2 = 0 : py2 = 0ang_arc = 0 : l_arc = 0dr = 0state_arc = -1if dbg then	unID=1	HOTSPOT2 x1, 0, unID, y1, 1+128: unID=unID+1	HOTSPOT2 x1, y1, unID, y1, 2: unID=unID+1	HOTSPOT2 x1, -1, unID, y1, 3: unID=unID+1	HOTSPOT2 0, y1, unID, x1, 1+128: unID=unID+1	HOTSPOT2 x1, y1, unID, x1, 2: unID=unID+1	HOTSPOT2 -1, y1, unID, x1, 3: unID=unID+1	HOTSPOT2 x2, 0, unID, y2, 1+128: unID=unID+1	HOTSPOT2 x2, y2, unID, y2, 2: unID=unID+1	HOTSPOT2 x2, -1, unID, y2, 3: unID=unID+1	HOTSPOT2 0, y2, unID, x2, 1+128: unID=unID+1	HOTSPOT2 x2, y2, unID, x2, 2: unID=unID+1	HOTSPOT2 -1, y2, unID, x2, 3: unID=unID+1	HOTSPOT2 x3, 0, unID, y3, 1+128: unID=unID+1	HOTSPOT2 x3, y3, unID, y3, 2: unID=unID+1	HOTSPOT2 x3, -1, unID, y3, 3: unID=unID+1	HOTSPOT2 0, y3, unID, x3, 1+128: unID=unID+1	HOTSPOT2 x3, y3, unID, x3, 2: unID=unID+1	HOTSPOT2 -1, y3, unID, x3, 3: unID=unID+1endifif type_arc = 1 then	gosub "arc_by_dot"endifif type_arc = 2 then	gosub "arc_by_vect"endifif type_arc = 3 then	gosub "dot_by_arc"endifgoto 20"arc_by_dot":	!Получаем координатцы направляющих векторов отрезков	call "BasicGeometricCalc_20" parameters 	iFunction 	= 1,						Point1x	= x2,						Point1y	= y2,						Point1z	= 0,						Point2x	= x1,						Point2y	= y1,						Point2z	= 0,			returned_parameters	DirectionVx,						DirectionVy,						DirectionVz,						Distance	vx1 = DirectionVx : vy1 = DirectionVy : dl1 = Distance	call "BasicGeometricCalc_20" parameters 	iFunction 	= 1,						Point1x	= x3,						Point1y	= y3,						Point1z	= 0,						Point2x	= x2,						Point2y	= y2,						Point2z	= 0,			returned_parameters	DirectionVx,						DirectionVy,						DirectionVz,						Distance	vx2 = DirectionVx : vy2 = DirectionVy : dl2 = Distance	!Получаем угол между векторами	t1 = vx1*vx2 + vy1*vy2	t2 = vx1*vx1 + vy1*vy1	t3 = vx2*vx2 + vy2*vy2	ang = 0	if t2>EPS and t3>EPS then 		t4 = t1/sqr(t2)*sqr(t3)		if t4<=1 and t4>=-1 then ang = 180-acs(t4)	else		out_txt = "t2.t3"		state_arc = -1		goto 20	endif	!Отступ от края отрезка на скругление в относительной СК	dr = 0	if tan(ang/2)>0 and ang>EPS then 		dr = r_arc / tan(ang/2)		if dr>dl1 or dr>dl2 then			out_txt = "l<dr"			state_arc = -1			goto 20		endif	else		out_txt = "ang"		state_arc = -1		goto 20	endif	!Координаты точек касания откружности скругления	lambda_1 = 0 : lambda_2 = 0	if abs(dr)>EPS then 		call "macro_dotbydr" parameters x1=x1, y1=y1,									x2=x2, y2=y2,									dr=dr,									returned_parameters dx, dy		px1 = dx : py1 = dy		call "macro_dotbydr" parameters x1=x3, y1=y3,									x2=x2, y2=y2,									dr=dr,									returned_parameters dx, dy		px2 = dx : py2 = dy	else		out_txt = "dr"		state_arc = -1		goto 20	endif	!Координаты векторов-нормалей	vnx1 = vy1 : vny1 = -vx1	vnx2 = vy2 : vny2 = -vx2	!Координаты центра окружности	call "BasicGeometricCalc_20" parameters	iFunction	= 4,						vx1	= vnx1,						vy1	= vny1,						px1	= px1,						py1	= py1,						vx2	= vnx2,						vy2	= vny2,						px2	= px2,						py2	= py2,			returned_parameters	ipx,ipy,state	state_arc = state	if state_arc<EPS then		out_txt = "state" 		goto 20	endif	!Углы для построения дуги	t1 = vx1*vx1 + vy1*vy1	t2 = vx2*vx2 + vy2*vy2	if t1>EPS and t2>EPS then 		t3 = vy1 / (SQR(t1))		if t3<=1 and t3>=-1 then ang_1 = acs(t3)		t4 = vy2 / (SQR(t2))		if t4<=1 and t4>=-1 then ang_2 = 90+acs(t4)	else		out_txt = "t1+t2"		goto 20	endif	!Справочные данные	ang_arc = 180 - ang	l_arc = (3.1415926535 * r_arc * ang_arc)/180	out_txt = "ok"20:	if dbg then		pen 6		line2 x1,y1, x2,y2		line2 x2,y2, x3,y3		pen 20		hotspot2 ipx,ipy		hotspot2 px1,py1		hotspot2 px2,py2	endif	exit ipx,ipy,px1,py1,px2,py2,ang_arc,l_arc,dr,statereturn"arc_by_vect":	!Определяем точку пересечения	px1 = x1 : py1 = y1	px2 = x3 : py2 = y3	if abs((-vx1*vy2) - (-vy1*vx2))>EPS then		call "BasicGeometricCalc_20" parameters	iFunction	= 4,							vx1	= vx1,							vy1	= vy1,							px1	= px1,							py1	= py1,							vx2	= vx2,							vy2	= vy2,							px2	= px2,							py2	= py2,				returned_parameters	ipx,ipy,state		x2 = ipx : y2 = ipy		gosub "arc_by_dot"	else		state = -1		exit ipx,ipy,px1,py1,px2,py2,ang_arc,l_arc,dr,state	endifreturn"dot_by_arc":	if dbg then		pen 6		line2 x1,y1, x2,y2		line2 x2,y2, x3,y3	endif	!Длины гипотенуз	lo_1 = sqr((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))	lo_2 = sqr((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3))	!Углы поворота	ang_1 = asn(r_arc/lo_1)	ang_2 = asn(r_arc/lo_2)	sin_ang_1 = r_arc/lo_1	sin_ang_2 = r_arc/lo_2		cos_ang_1 = cos(ang_1)	cos_ang_2 = cos(ang_2)	!Координаты конца	xo_1=x1+(x2-x1)*cos_ang_1-(y2-y1)*sin_ang_1	yo_1=y1+(x2-x1)*sin_ang_1+(y2-y1)*cos_ang_1	xo_2=x3+(x2-x3)*cos_ang_2-(y2-y3)*sin_ang_2	yo_2=y3+(x2-x3)*sin_ang_2+(y2-y3)*cos_ang_2!	xo_1=x1+(x2-x1)*cos(ang_1)-(y2-y1)*sin(ang_1)!	yo_1=y1+(x2-x1)*sin(ang_1)+(y2-y1)*cos(ang_1)!	xo_2=x3+(x2-x3)*cos(ang_2)-(y2-y3)*sin(ang_2)!	yo_2=y3+(x2-x3)*sin(ang_2)+(y2-y3)*cos(ang_2)	call "BasicGeometricCalc_20" parameters iFunction 	= 13,						Point1x	= x1,						Point1y	= y1,						Point1z	= 0,						Point2x	= xo_1,						Point2y	= yo_1,						Point2z	= 0,						Point3x	= x2,						Point3y	= y2,						Point3z	= 0,						Point4x	= x3,						Point4y	= y3,						Point4z	= 0,			returned_parameters	dx, dy, state	if dbg and state<EPS then		pen 20		line2 x3,y3,x2,y2		line2 x1,y1,xo_1,yo_1	endif	if abs(state-1)>EPS then		xo_1=x1+(x2-x1)*cos(-ang_1)+(y2-y1)*sin_ang_1		yo_1=y1-(x2-x1)*sin_ang_1+(y2-y1)*cos(-ang_1)!		xo_1=x1+(x2-x1)*cos(-ang_1)-(y2-y1)*sin(-ang_1)!		yo_1=y1+(x2-x1)*sin(-ang_1)+(y2-y1)*cos(-ang_1)	endif	call "BasicGeometricCalc_20" parameters iFunction 	= 13,						Point1x	= x2,						Point1y	= y2,						Point1z	= 0,						Point2x	= xo_2,						Point2y	= yo_2,						Point2z	= 0,						Point3x	= x2,						Point3y	= y2,						Point3z	= 0,						Point4x	= x1,						Point4y	= y1,						Point4z	= 0,			returned_parameters	dx, dy, state	if dbg and state<EPS then		pen 20		line2 x1,y1,x2,y2		line2 x2,y2,xo_2,yo_2	endif	if abs(state-1)>EPS then		xo_2=x3+(x2-x3)*cos(-ang_2)+(y2-y3)*sin_ang_2		yo_2=y3-(x2-x3)*sin_ang_2+(y2-y3)*cos(-ang_2)!		xo_2=x3+(x2-x3)*cos(-ang_2)-(y2-y3)*sin(-ang_2)!		yo_2=y3+(x2-x3)*sin(-ang_2)+(y2-y3)*cos(-ang_2)	endif	!Точка пересечения - и есть наша точка	call "BasicGeometricCalc_20" parameters iFunction 	= 13,						Point1x	= x1,						Point1y	= y1,						Point1z	= 0,						Point2x	= xo_1,						Point2y	= yo_1,						Point2z	= 0,						Point3x	= x3,						Point3y	= y3,						Point3z	= 0,						Point4x	= xo_2,						Point4y	= yo_2,						Point4z	= 0,			returned_parameters	dx, dy, state	if dbg then		hotspot2 dx, dy		if state<EPS then			pen 3			line2 x1,y1,x2,y2			line2 x2,y2,xo_2,yo_2		endif	endif	ipx = dx : ipy = dy : state_arc = 1	end ipx,ipy,state_arcreturn"l_vect":	l_vect = 0	tt = vx*vx + vy*vy	if tt>EPS then l_vect = SQR(tt)return