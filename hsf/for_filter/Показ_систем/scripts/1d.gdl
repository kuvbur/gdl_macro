EPS = 0.00001var_t=""dim syst_name_t[] : syst_name_t[1]=""n_sys=0DIM SystemStr[][]isavailable = 0parValue = ""show = 1show_el = 1dbg = 0n = REQUEST ("Name_of_main", "", name)is_dbg = 1if name="MEP_m_RequestSystemGlobals.gsm" then is_dbg = 0if name="MEP_m_ConnectionsMEP_4.gsm" then is_dbg = 0dbg = dbg * is_dbg_currStr = ""el_type_view = 0dim arr[]dim str_arr_in[] : i=0i=i+1 : str_arr_in[i] = "Вход"i=i+1 : str_arr_in[i] = "вход"i=i+1 : str_arr_in[i] = "Впуск"i=i+1 : str_arr_in[i] = "впуск"i=i+1 : str_arr_in[i] = "Отвод"i=i+1 : str_arr_in[i] = "_in"dim str_arr_out[] : i=0i=i+1 : str_arr_out[i] = "Выхол"i=i+1 : str_arr_out[i] = "выход"i=i+1 : str_arr_out[i] = "Выпуск"i=i+1 : str_arr_out[i] = "выпуск"i=i+1 : str_arr_out[i] = "Подвод"i=i+1 : str_arr_out[i] = "Слив"i=i+1 : str_arr_out[i] = "_out"MEP_HORIZONTAL = 1MEP_VERTICAL = 2MEP_INCLINED = 3dim con_syst[][] : con_syst[1][1]="" : con_syst[1][2] = "" : systemName_ = ""used_system = ""n = APPLICATION_QUERY ("MEPMODELER", "IsAvailable()", isavailable)skip_show = 0IF isavailable and isMep THEN!-------- Определение положения в пространстве -----------	if (GLOB_SCRIPT_TYPE = 2 or GLOB_SCRIPT_TYPE = 3) and GLOB_PREVIEW_MODE = 0 and GLOB_FEEDBACK_MODE = 0 and GLOB_SEO_TOOL_MODE = 0 then		if isEqp then			show = 1			success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_eqip", show)			if STRSTR(name, "Опора")>0 or STRSTR(name, "Проход")>0 or STRSTR(name, "опора")>0 then show = 1		else			show_pipe = 1			success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_pipe", show_pipe)			if show_pipe then				mep_el_type_view = 0 : mep_el_sech = 1				call "mep_get_type_view" parameters all MEP_Position = MEP_Position, MEP_StraightLength = MEP_StraightLength,AC_AutoOnStoryVisibility=AC_AutoOnStoryVisibility RETURNED_PARAMETERS mep_el_type_view, mep_el_sech				if mep_el_type_view>EPS then					show_if_vert=1 : show_if_gor=1 : show_if_ang=1					success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_if_vert", show_if_vert)					success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_if_gor", show_if_gor)					success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_if_ang", show_if_ang)					if abs(mep_el_type_view)=MEP_HORIZONTAL and not(show_if_gor) and show then show = 0					if abs(mep_el_type_view)=MEP_VERTICAL and not(show_if_vert) and show then show = 0					if abs(mep_el_type_view)=MEP_INCLINED and not(show_if_ang) and show then show = 0					show = show * mep_el_sech				else					show = 1				endif			else				show = 0			endif		endif		if show>EPS then			show_constr = 1			success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_constr", show_constr)			if show_constr then				constr_par_name = ""				success = LIBRARYGLOBAL ("Libraryflobals-mep", "constr_par_name", constr_par_name)				if strlen(constr_par_name)>1 then					parNames = constr_par_name					gosub 44					show_constr = boolparValue				else					show_constr = 1				endif			else				show_constr = 1			endif				show_es = 1			success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_es", show_es)			if show_es then				es_par_name = ""				success = LIBRARYGLOBAL ("Libraryflobals-mep", "es_par_name", es_par_name)				if strlen(es_par_name)>1 then					parNames = es_par_name					gosub 44					show_es = boolparValue				else					show_es = 1				endif			else				show_es = 1			endif				show_ath = 1			success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_ath", show_ath)			if show_ath then				ath_par_name = ""				success = LIBRARYGLOBAL ("Libraryflobals-mep", "ath_par_name", ath_par_name)				if strlen(ath_par_name)>1 then					parNames = ath_par_name					gosub 44					show_ath = boolparValue				else					show_ath = 1				endif			else				show_ath = 1			endif			show_vk = 1			success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_vk", show_vk)			if show_vk then				vk_par_name = ""				success = LIBRARYGLOBAL ("Libraryflobals-mep", "vk_par_name", vk_par_name)				if strlen(vk_par_name)>1 then					parNames = vk_par_name					gosub 44					show_vk = boolparValue				else					show_vk = 1				endif			else				show_vk = 1			endif			show = ((show-1)>EPS) + show_constr * show_es * show_ath * show_vk		endif	else		show = 1		show_el = 1		skip_show = 1	endif!!!	FOR ConID_ = 1 TO MEP_NumberConnections!!!		IF MEP_StrConnectionData[ConID_][2] <> "0" THEN!!!			ConSystemID = MEP_StrConnectionData[ConID_][2]!!!			ConToolType_ =  MEP_NumConnectionData[ConID_][19]!!!			queryStr = "GetMEPSystems (" + str(ConToolType_,1,0) + ")"!!!			isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)!!!			num = VARDIM2(SystemStr)/2!!!			FOR i = 1 TO num!!!				IF ConSystemID = SystemStr[1][i*2-1] then!!!					systemName_ = SystemStr[1][i*2]!!!					sname = systemName_ : gosub "clear_name" : systemName_ = sname!!!					not_in_array = 1!!!					if n_sys>EPS then!!!						for ki=1 to n_sys!!!							if systemName_=syst_name_t[ki] then!!!								not_in_array = 0!!!								ki=n_sys!!!							endif!!!						next ki!!!					endif!!!					if not_in_array then!!!						n_sys=n_sys+1!!!						sname = systemName_ : gosub "clear_name" : systemName_ = sname!!!						syst_name_t[n_sys] = systemName_!!!					endif!!!				endif!!!			next i!!!		endif!!!	NEXT ConID_	FOR ConID_ = 1 TO MEP_NumberConnections		if ConID_<=vardim1(MEP_StrConnectionData) then			con_sys = ""			con_name = ""			IF MEP_StrConnectionData[ConID_][2] <> "0" and MEP_NumConnectionData[ConID_][22]>EPS THEN				gosub "get_clear_systname"				con_sys = systemName_				con_name = MEP_StrConnectionData[ConID_][3]				n_sys=n_sys+1			endif			con_syst[ConID_][1] = con_name			con_syst[ConID_][2] = con_sys		endif	NEXT ConID_	if n_sys>EPS then		syst_name = ""		if abs(n_sys-1)<EPS then			syst_name_t[1] = systemName_			syst_name = systemName_		else			n_sys = 0			!!----------- Сначала - выпуск			arr = str_arr_out			gosub "filter_arr"			!!----------- Потом впуск			arr = str_arr_in			gosub "filter_arr"			!!!----------- Ну и остатки			FOR ConID_ = 1 TO MEP_NumberConnections				if strlen(con_syst[ConID_][2])>0 then gosub "add_systname"			NEXT ConID_		endif	else		syst_name = "!!!"	endifENDIFif isavailable and isMep and n_sys<EPS then	DIM SystemStr[][]	queryStr = "GetMEPSystems (" + STR(ConToolType, 1, 0) + ")"	isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)	num = VARDIM2(SystemStr)/2	FOR i = 2 TO num + 1		IF MEP_StrConnectionData[1][2] = SystemStr[1][(i-1)*2-1] THEN syst_name = SystemStr[1][(i-1)*2]	NEXT i	if syst_name = "!!!" then		queryStr = "GetMEPSystems (" + STR(1, 1, 0) + ")"		isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)		num = VARDIM2(SystemStr)/2		FOR i = 2 TO num + 1			IF MEP_StrConnectionData[1][2] = SystemStr[1][(i-1)*2-1] THEN syst_name = SystemStr[1][(i-1)*2]		NEXT i	endif	if syst_name = "!!!" then		queryStr = "GetMEPSystems (" + STR(2, 1, 0) + ")"		isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)		num = VARDIM2(SystemStr)/2		FOR i = 2 TO num + 1			IF MEP_StrConnectionData[1][2] = SystemStr[1][(i-1)*2-1] THEN syst_name = SystemStr[1][(i-1)*2]		NEXT i	endif	sname = syst_name : gosub "clear_name" : syst_name = snameendifif skip_show then goto "end_show_system"if show<EPS then	show_el = 1	goto "end_show_system"endifshow_all_system = 1 : success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_all_system", show_all_system)show_el = 0if show_all_system then	show_el = 1	goto "end_show_system"endifif strstr(syst_name,"!!!")>EPS then	show_el = 1	goto "end_show_system"endifdim show_system[] : show_system[1] = ""success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_system", show_system)if n_sys<EPS and STRSTR(syst_name, ",")>EPS then	txt_var = syst_name	max_iter = 1000	for i=1 to max_iter		n_t = STRSTR(txt_var, ",")		if n_t<EPS then 			i=max_iter			if STRSUB(txt_var, 1, 1) = " " then txt_var = STRSUB(txt_var, 2, STRLEN(txt_var))			if strlen(txt_var)>0 then				n_sys = n_sys + 1				syst_name_t[n_sys]=txt_var			endif		else			var_t = STRSUB(txt_var, 1, n_t-1)			if STRSUB(var_t, 1, 1) = " " then var_t = STRSUB(var_t, 2, STRLEN(var_t))			txt_var = STRSUB(txt_var, n_t+1, strlen(txt_var))			n_sys = n_sys + 1			syst_name_t[n_sys]=var_t		endif	next iendiffor i=1 to vardim1(show_system)	if strlen(show_system[i])>0 and show_system[i]<>" " then		if n_sys>EPS then			for k=1 to n_sys				sname = syst_name_t[k]				gosub 33			next k		else			sname = syst_name			gosub 33		endif	endifnext igoto "end_show_system""get_clear_systname":	DIM SystemStr[][]	ConSystemID = MEP_StrConnectionData[ConID_][2]	ConToolType_ =  MEP_NumConnectionData[ConID_][19]	queryStr = "GetMEPSystems (" + str(ConToolType_,1,0) + ")"	isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)	num = VARDIM2(SystemStr)/2	FOR iii = 1 TO num		IF ConSystemID = SystemStr[1][iii*2-1] then			systemName_ = SystemStr[1][iii*2]			sname = systemName_ : gosub "clear_name" : systemName_ = sname			iii = num		endif	next iiireturn"filter_arr":	FOR ConID_ = 1 TO MEP_NumberConnections		if strlen(con_syst[ConID_][2])>0 then			var = con_syst[ConID_][1] : gosub "name_has_part"			if flag_find_part then gosub "add_systname"		endif	NEXT ConID_return"add_systname":	tsys = "@"+con_syst[ConID_][2]+"@"	if strstr(used_system, tsys)=0 then		n_sys=n_sys+1		syst_name_t[n_sys] = con_syst[ConID_][2]		if strlen(syst_name)>0 then			syst_name = syst_name + ", " + con_syst[ConID_][2]		else			syst_name = con_syst[ConID_][2]		endif		used_system = used_system + tsys		con_syst[ConID_][2] = ""	endifreturn"name_has_part":	flag_find_part = 0	for jj=1 to vardim1(arr)		if STRSTR(var, arr[jj])>0 then			flag_find_part = 1			jj = vardim1(arr)		endif	next jjreturn44:	!!Чтение IFC свойств	isexist = 0	parValue = "-"	boolparValue = 0	DIM folderNamesArray[]	n = APPLICATION_QUERY ("OwnCustomParameters", "GetParameterFolderNames()", folderNamesArray)	for iii = 1 to vardim1(folderNamesArray) step 3		DIM parNamesArray[]		querystring = "GetParameterNames(" + folderNamesArray[iii] + ")"		n = APPLICATION_QUERY ("OwnCustomParameters", querystring, parNamesArray)		for jjj = 1 to vardim1(parNamesArray) step 3			if strstr(STRTOLOWER(parNamesArray[jjj]), STRTOLOWER(parNames))>0 then				querystring = "GetParameter(" + parNamesArray[jjj] + ")"				isexist = APPLICATION_QUERY ("OwnCustomParameters", querystring, parValue)				jjj = vardim1(parNamesArray)				iii = vardim1(folderNamesArray)			endif		next jjj	next iii	if isexist and vartype(parValue)=2 then		if parValue = "TRUE" then boolparValue = 1	endifreturn33:	usl1 =(show_system[i]=sname)	if STRSUB(show_system[i], 1, 1) = "*" and not(usl1) then !Если сборка начинается с * - отсекаем, и ищем конец		findsp = STRSUB(show_system[i], 2, STRLEN(show_system[i]))		if STRLEN(sname)>=STRLEN(findsp) then !Если имя сборки меньше длины искомого текста - она явно не подходит			findsp_t = STRSUB(sname,STRLEN(sname)-STRLEN(findsp)+1,STRLEN(findsp))			usl1 = (findsp_t=findsp)		else			usl1 = 0		endif	endif	if STRSUB(show_system[i], STRLEN(show_system[i]), 1) = "*" and not(usl1) then !Если сборка заканчивается на * - отсекаем, и ищем начало		findsp = STRSUB(show_system[i], 1, STRLEN(show_system[i])-1)		if STRLEN(sname)>=STRLEN(findsp) then !Если имя сборки меньше длины искомого текста - она явно не подходит			findsp_t = STRSUB(sname,1,STRLEN(findsp))			usl1 = (findsp_t=findsp)		else			usl1 = 0		endif	endif	if STRSUB(show_system[i], 1, 1) = "*" and STRSUB(show_system[i], STRLEN(show_system[i]), 1) = "*" and not(usl1) then !Ищем вхождение		findsp = STRSUB(show_system[i], 2, STRLEN(show_system[i])-2)		usl1 = (STRSTR(sname, findsp, 1)>0)	endif	if STRSUB(show_system[i], 1, 1) = "*" and STRLEN(show_system[i])=1 and not(usl1) then !Все сборки		usl1 = 1	endif	if usl1 then show_el = 1	if show_el then goto "end_show_system"return"clear_name":	if STRSTR(sname, "(")>0 then sname = STRSUB (sname, 1, STRSTR(sname, "(")-1)	if STRSTR(sname, " ")>0 then		_currStr = sname : gosub "replace_text" : sname = _newStr	endifreturn"replace_text":	_charToReplace = " "	_newChar = ""    _newStr = ""     ! intialize a new empty string    _i = 1000        ! creating a "guard" for the while, set the max number of runs    while _currStr <> "" and _i > 0 do        _n = STRSTR (_currStr, _charToReplace, 1)   ! check the script for _charToReplace        if _n > 0 then	            ! _charToReplace is first found in position _n            ! add the first part of _currStr to _newStr, plus add _newChar            _newStr = _newStr + STRSUB (_currStr, 1, _n - 1) + _newChar            ! get a new _currStr from the chars after position _n            _currStr = STRSUB (_currStr, _n + 1, STRLEN(_currStr) - _n)	         else            ! if _charToReplace is not found then add _currStr to _newStr            _newStr = _newStr + _currStr            ! close the loop with changing _currStr to empty string            _currStr = ""        endif        _i = _i - 1	! decrease the "guard" variable in each run    endwhilereturn"end_show_system":	show_el = show_el * show	if isMep then		parameters syst_name = syst_name		end show_el, syst_name	else		end show_el	endif