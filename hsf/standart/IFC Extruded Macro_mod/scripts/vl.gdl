hideparameter "A", "B" !, "ZZYZX"if iEntityType = ENTITY_BEAM				then values "Ifc2x2RootType" "IfcBeam"if iEntityType = ENTITY_COLUMN				then values "Ifc2x2RootType" "IfcColumn"if iEntityType = ENTITY_DISCRETE_ACCESSORY	then values "Ifc2x2RootType" "IfcDiscreteAccessory"if iEntityType = ENTITY_FOOTING				then values "Ifc2x2RootType" "IfcFooting"if iEntityType = ENTITY_MEMBER				then values "Ifc2x2RootType" "IfcMember"if iEntityType = ENTITY_OPENING				then values "Ifc2x2RootType" "IfcIfcOpening"if iEntityType = ENTITY_PILE				then values "Ifc2x2RootType" "IfcPile"if iEntityType = ENTITY_PLATE				then values "Ifc2x2RootType" "IfcPlate"values "ProfileType" `ПРЯМОУГОЛЬНИК`, `RECTANGLEHOLLOW`,			`CIRCLE`, `CIRCLEHOLLOW`,			`ELLIPSE`,			`TRAPEZIUM`,			`CSHAPE`, `ISHAPE`, `LSHAPE`, `TSHAPE`, `USHAPE`, `ZSHAPE`,			`CRANERAILASHAPE`, `CRANERAILFSHAPE`,			`ARBITRARY`lock "ProfileType"if GLOB_MODPAR_NAME = "ProfileType" then	iProfileType = ID_PROFILETYPE_ARBITRARY	if ProfileType = `ПРЯМОУГОЛЬНИК`		then iProfileType = ID_PROFILETYPE_RECTANGLE	if ProfileType = `RECTANGLEHOLLOW`	then iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW	if ProfileType = `ROUNDEDRECTANGLE`	then iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE	if ProfileType = `CIRCLE`			then iProfileType = ID_PROFILETYPE_CIRCLE	if ProfileType = `CIRCLEHOLLOW`		then iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW	if ProfileType = `ELLIPSE`			then iProfileType = ID_PROFILETYPE_ELLIPSE	if ProfileType = `TRAPEZIUM`		then iProfileType = ID_PROFILETYPE_TRAPEZIUM	if ProfileType = `CSHAPE`			then iProfileType = ID_PROFILETYPE_CSHAPE	if ProfileType = `ISHAPE`			then iProfileType = ID_PROFILETYPE_ISHAPE	if ProfileType = `LSHAPE`			then iProfileType = ID_PROFILETYPE_LSHAPE	if ProfileType = `TSHAPE`			then iProfileType = ID_PROFILETYPE_TSHAPE	if ProfileType = `USHAPE`			then iProfileType = ID_PROFILETYPE_USHAPE	if ProfileType = `ZSHAPE`			then iProfileType = ID_PROFILETYPE_ZSHAPE	if ProfileType = `CRANERAILASHAPE`	then iProfileType = ID_PROFILETYPE_CRANERAILASHAPE	if ProfileType = `CRANERAILFSHAPE`	then iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE	parameters iProfileType = iProfileTypeelse	ProfileType = `ARBITRARY`	if iProfileType = ID_PROFILETYPE_RECTANGLE			then ProfileType = `ПРЯМОУГОЛЬНИК`	if iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW	then ProfileType = `RECTANGLEHOLLOW`	if iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE	then ProfileType = `ROUNDEDRECTANGLE`	if iProfileType = ID_PROFILETYPE_CIRCLE				then ProfileType = `CIRCLE`	if iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW		then ProfileType = `CIRCLEHOLLOW`	if iProfileType = ID_PROFILETYPE_ELLIPSE			then ProfileType = `ELLIPSE`	if iProfileType = ID_PROFILETYPE_TRAPEZIUM			then ProfileType = `TRAPEZIUM`	if iProfileType = ID_PROFILETYPE_CSHAPE				then ProfileType = `CSHAPE`	if iProfileType = ID_PROFILETYPE_ISHAPE				then ProfileType = `ISHAPE`	if iProfileType = ID_PROFILETYPE_LSHAPE				then ProfileType = `LSHAPE`	if iProfileType = ID_PROFILETYPE_TSHAPE				then ProfileType = `TSHAPE`	if iProfileType = ID_PROFILETYPE_USHAPE				then ProfileType = `USHAPE`	if iProfileType = ID_PROFILETYPE_ZSHAPE				then ProfileType = `ZSHAPE`	if iProfileType = ID_PROFILETYPE_CRANERAILASHAPE	then ProfileType = `CRANERAILASHAPE`	if iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE	then ProfileType = `CRANERAILFSHAPE`	parameters ProfileType = ProfileTypeendifif not(iProfileType = ID_PROFILETYPE_ARBITRARY) then	hideparameter "Profile", "ProfileNr"endifif not(iProfileType = ID_PROFILETYPE_TSHAPE) then	hideparameter "etr"endifif	iProfileType = ID_PROFILETYPE_RECTANGLE |\	iProfileType = ID_PROFILETYPE_CIRCLE |\	iProfileType = ID_PROFILETYPE_ELLIPSE then	hideparameter "wt", "ft",				  "rr", "tr"endifif iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW then	hideparameter "ft", "rr", "tr"else	hideparameter "outr", "inr"endifif iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE then	hideparameter "ft", "rr", "tr"else	hideparameter "outr", "inr"endifif not(iProfileType = ID_PROFILETYPE_ELLIPSE) then	hideparameter "SemiAxis1", "SemiAxis2"else	hideparameter "ws", "ds"endifif not(iProfileType = ID_PROFILETYPE_RECTANGLEHOLLOW) then	hideparameter "bs"else	hideparameter "ws"endifif not(iProfileType = ID_PROFILETYPE_ROUNDEDRECTANGLE) then	hideparameter "bs"else	hideparameter "ws"endifif not(iProfileType = ID_PROFILETYPE_TRAPEZIUM) then	hideparameter "TopXDim", "TopXOffset"endifif iProfileType = ID_PROFILETYPE_TRAPEZIUM then	hideparameter "wt", "ft", "Girth", "tr", "rr"endifif not(iProfileType = ID_PROFILETYPE_CSHAPE) then	hideparameter "Girth"endifif iProfileType = ID_PROFILETYPE_ISHAPE then	hideparameter "tr"endifif iProfileType = ID_PROFILETYPE_LSHAPE then	hideparameter "ft"endifif iProfileType = ID_PROFILETYPE_CSHAPE then	hideparameter "ft", "tr"endifif iProfileType = ID_PROFILETYPE_ZSHAPE then	hideparameter "w"endifif iProfileType = ID_PROFILETYPE_ELLIPSE then	hideparameter "tr", "rr", "ws", "ds", "wt"endifif iProfileType = ID_PROFILETYPE_CIRCLE then	hideparameter "tr", "rr", "ws", "wt"endifif iProfileType = ID_PROFILETYPE_CIRCLEHOLLOW then	hideparameter "tr", "rr", "ws", "ft"endifif	not(iProfileType = ID_PROFILETYPE_CRANERAILASHAPE) &\	not(iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE) then	hideparameter "h", "HeadWidth", "HeadDepth2", "HeadDepth3", "BaseWidth2", "BaseWidth4", "BaseDepth1", "BaseDepth2", "BaseDepth3"endifif	iProfileType = ID_PROFILETYPE_CRANERAILASHAPE |\	iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE then	hideparameter "ws", "rr", "ft", "ds"endifif iProfileType = ID_PROFILETYPE_CRANERAILFSHAPE then	hideparameter "BaseWidth4", "HeadWidth", "BaseDepth3"endifparameters exz = ZZYZXlock "exx", "exy", "exz"! ==============================================================================! Calculating Top and Bottom Level! ==============================================================================dim bbb[][3]for i=1 to nsp/3	bbb[i][1] = get(1)	bbb[i][2] = get(1)	bbb[i][3] = get(1)next iDIM cx[3]: DIM cy[3]: DIM cz[3] ! The Coordinate SystemDIM trm[3] ! The Translation VectorDIM m[4][4] ! The Last Rotation's MatrixDIM summ[4][4] ! The Whole Rotation MatrixDIM temp[4][4] ! Temporary Matrixgosub 100	! Init Coordinate System!OBJECT LOCAL SYSTEMput ry:	gosub 122	! rotyput rx:	gosub 121	! rotx!EXTRUSION LOCAL SYSTEMput expx, expy, expz:  gosub 110	! addput exrz:	gosub 123	! rotzput exry:	gosub 122	! rotyput exrx:	gosub 121	! rotx!LocalTranput ltpx, ltpy, 0:  gosub 110	! addput ltrot:	gosub 123	! rotzminZ = 1maxZ = 0for i=1 to vardim1(bbb)	px = bbb[i][1]	py = bbb[i][2]	put px, py, 0	gosub 210 ! Transform Point with summ[4][4] and trm[3]	vx = get(1)	vy = get(1)	vz = get(1)	if i=1 then		minZ = vz		maxZ = vz	else		if vz < minZ then minZ = vz		if vz > maxZ then maxZ = vz	endif	put px + exx, py + exy, exz	gosub 210 ! Transform Point with summ[4][4] and trm[3]	vx = get(1)	vy = get(1)	vz = get(1)	if vz < minZ then minZ = vz	if vz > maxZ then maxZ = vznext iparameters	ac_bottomlevel	= minZ,			ac_toplevel		= maxZ! ==============================================================================END! ==============================================================================100:!!! ***** Init Coordinate System! Reset Coordinate Vectorscx[1]=1: cx[2]=0: cx[3]=0cy[1]=0: cy[2]=1: cy[3]=0cz[1]=0: cz[2]=0: cz[3]=1! Set Zero Translationtrm[1]=0: trm[2]=0: trm[3]=0! Set Identity MatrixFOR i=1 TO 4	FOR j=1 TO 4		IF i=j THEN			m[i][j]=1			summ[i][j]=1		ELSE			m[i][j]=0			summ[i][j]=0		ENDIF	NEXT jNEXT iRETURN110:!!! Translation x,y,zIF NSP<>3 THEN PRINT "Something Wrong !"! Transform vector to the current coordinate systemGOSUB 201   ! Transform Point with summ[4][4]x_hpts = GET(1)y_hpts = GET(1)z_hpts = GET(1)! Sum Translation Vectortrm[1] = trm[1] + x_hptstrm[2] = trm[2] + y_hptstrm[3] = trm[3] + z_hptsRETURN111:!!! Translation xIF NSP<>1 THEN PRINT "Something Wrong !"x_hpts=GET(1)PUT x_hpts, 0, 0GOTO 110112:!!! Translation yIF NSP<>1 THEN PRINT "Something Wrong !"y_hpts=GET(1)PUT 0, y_hpts, 0GOTO 110113:!!! Translation zIF NSP<>1 THEN PRINT "Something Wrong !"z_hpts=GET(1)PUT 0, 0, z_hptsGOTO 110120:!!! Rotation around Axis with AngleIF NSP<>4 THEN PRINT "Something Wrong !"! Transform axis to the current coordinate systemGOSUB 201   ! Transform Point with summ[4][4]alfa_hpts = -GET(1)x_hpts = GET(1)y_hpts = GET(1)z_hpts = GET(1)GOSUB 301   ! Rotation Axis and Angle to QuaternionGOSUB 304   ! Quaternion to Rotation MatrixGOSUB 202   ! Transform Coordinate System with Matrix m[4][4]GOSUB 203   ! Transform Summ MatrixRETURN121:!!! Rotation around X axisIF NSP<>1 THEN PRINT "Something Wrong !"x_hpts = cx[1]y_hpts = cx[2]z_hpts = cx[3]alfa_hpts = -GET(1)GOSUB 301   ! Rotation Axis and Angle to QuaternionGOSUB 304   ! Quaternion to Rotation MatrixGOSUB 202   ! Transform Coordinate System with Matrix m[4][4]GOSUB 203   ! Transform Summ MatrixRETURN122:!!! Rotation around Y axisIF NSP<>1 THEN PRINT "Something Wrong !"x_hpts = cy[1]y_hpts = cy[2]z_hpts = cy[3]alfa_hpts = -GET(1)GOSUB 301   ! Rotation Axis and Angle to QuaternionGOSUB 304   ! Quaternion to Rotation MatrixGOSUB 202   ! Transform Coordinate System with Matrix m[4][4]GOSUB 203   ! Transform Summ MatrixRETURN123:!!! Rotation around Z axisIF NSP<>1 THEN PRINT "Something Wrong !"x_hpts = cz[1]y_hpts = cz[2]z_hpts = cz[3]alfa_hpts = -GET(1)GOSUB 301   ! Rotation Axis and Angle to QuaternionGOSUB 304   ! Quaternion to Rotation MatrixGOSUB 202   ! Transform Coordinate System with Matrix m[4][4]GOSUB 203   ! Transform Summ MatrixRETURN!!! ******************************************!!! Matrix Functions!!! ******************************************200:!!! Transform Point with m[4][4]x_hpts=GET(1): y_hpts=GET(1): z_hpts=GET(1): h_hpts=1PUT x_hpts*m[1][1] + y_hpts*m[2][1] + z_hpts*m[3][1] + h_hpts*m[4][1] ! XPUT x_hpts*m[1][2] + y_hpts*m[2][2] + z_hpts*m[3][2] + h_hpts*m[4][2] ! YPUT x_hpts*m[1][3] + y_hpts*m[2][3] + z_hpts*m[3][3] + h_hpts*m[4][3] ! Z!PUT x_hpts*m[1][4] + y_hpts*m[2][4] + z_hpts*m[3][4] + h_hpts*m[4][4] ! hRETURN201:!!! Transform Point with summ[4][4]x_hpts=GET(1): y_hpts=GET(1): z_hpts=GET(1): h_hpts=1PUT x_hpts*summ[1][1] + y_hpts*summ[2][1] + z_hpts*summ[3][1] + h_hpts*summ[4][1] ! XPUT x_hpts*summ[1][2] + y_hpts*summ[2][2] + z_hpts*summ[3][2] + h_hpts*summ[4][2] ! YPUT x_hpts*summ[1][3] + y_hpts*summ[2][3] + z_hpts*summ[3][3] + h_hpts*summ[4][3] ! Z!PUT x_hpts*summ[1][4] + y_hpts*summ[2][4] + z_hpts*summ[3][4] + h_hpts*summ[4][4] ! hRETURN202:!!! Transform Coordinate SystemPUT cx[1],cx[2],cx[3]GOSUB 200cx[1] = GET(1)cx[2] = GET(1)cx[3] = GET(1)PUT cy[1],cy[2],cy[3]GOSUB 200cy[1] = GET(1)cy[2] = GET(1)cy[3] = GET(1)PUT cz[1],cz[2],cz[3]GOSUB 200cz[1] = GET(1)cz[2] = GET(1)cz[3] = GET(1)RETURN203:!!! Transform Matrix! Copy summ[] to temp[]FOR i=1 TO 4  FOR j=1 TO 4	  temp[i][j]=summ[i][j]  NEXT jNEXT i! Transform summ[] and m[]FOR i=1 TO 4  FOR j=1 TO 4	  summ[i][j]=0	  FOR k=1 TO 4		  summ[i][j]= summ[i][j]+temp[i][k]*m[k][j]	  NEXT k  NEXT jNEXT iRETURN210:!!! Transform Point with summ[4][4] and trm[3]GOSUB 201   ! Transform Point with summ[4][4]x_hpts=GET(1): y_hpts=GET(1): z_hpts=GET(1)PUT trm[1] + x_hptsPUT trm[2] + y_hptsPUT trm[3] + z_hptsRETURN!!! ******************************************!!! Quaternion Functions!!! ******************************************300:!!! ***** Euler angles to Quaternioncr_hpts = cos(x_hpts / 2)cp_hpts = cos(y_hpts / 2)cy_hpts = cos(z_hpts / 2)sr_hpts = sin(x_hpts / 2)sp_hpts = sin(y_hpts / 2)sy_hpts = sin(z_hpts / 2)cpcy_hpts = cp_hpts * cy_hptsspsy_hpts = sp_hpts * sy_hptsqW_hpts = cr_hpts * cpcy_hpts + sr_hpts * spsy_hptsqX_hpts = sr_hpts * cpcy_hpts - cr_hpts * spsy_hptsqY_hpts = cr_hpts * sp_hpts * cy_hpts + sr_hpts * cp_hpts * sy_hptsqZ_hpts = cr_hpts * cp_hpts * sy_hpts - sr_hpts * sp_hpts * cy_hptsRETURN301:!!! ***** Rotation Axis and Angle to Quaterniontemp_hpts = x_hpts * x_hpts + y_hpts * y_hpts + z_hpts * z_hptsdist_hpts = SIN(alfa_hpts/2) / SQR(temp_hpts)qX_hpts = x_hpts * dist_hptsqY_hpts = y_hpts * dist_hptsqZ_hpts = z_hpts * dist_hptsqW_hpts = COS(alfa_hpts/2)RETURN304:!!! ***** Quaternion to Rotation Matrixx2_hpts = qx_hpts + qx_hpts: y2_hpts = qy_hpts + qy_hpts: z2_hpts = qz_hpts + qz_hptsxx_hpts = qx_hpts * x2_hpts: xy_hpts = qx_hpts * y2_hpts: xz_hpts = qx_hpts * z2_hptsyy_hpts = qy_hpts * y2_hpts: yz_hpts = qy_hpts * z2_hpts: zz_hpts = qz_hpts * z2_hptswx_hpts = qw_hpts * x2_hpts: wy_hpts = qw_hpts * y2_hpts: wz_hpts = qw_hpts * z2_hptsm[1][1] = 1 - (yy_hpts + zz_hpts)m[1][2] = xy_hpts - wz_hptsm[1][3] = xz_hpts + wy_hptsm[1][4] = 0m[2][1] = xy_hpts + wz_hptsm[2][2] = 1 - (xx_hpts + zz_hpts)m[2][3] = yz_hpts - wx_hptsm[2][4] = 0m[3][1] = xz_hpts - wy_hptsm[3][2] = yz_hpts + wx_hptsm[3][3] = 1 - (xx_hpts + yy_hpts)m[3][4] = 0m[4][1] = 0m[4][2] = 0m[4][3] = 0m[4][4] = 1RETURN