EPS = 0.0001
dx = 0 : dy = 0 : dz = 0 : dl = 0 : flag = 1
TYPE_2D = 1
TYPE_3D = 2
type = TYPE_2D
if bDict then
	if not(haskey(line_dict.start.x) and haskey(line_dict.start.y) and haskey(line_dict.start.z) and haskey(line_dict.end.x) and haskey(line_dict.end.y) and haskey(line_dict.end.z)) then goto "m_end"
	if haskey(line_dict.start.z) and haskey(line_dict.end.z) then
		z1 = line_dict.start.z
		z2 = line_dict.end.z
		type = TYPE_3D
	else
		type = TYPE_2D
	endif
	x1 = line_dict.start.x
	x2 = line_dict.end.x
	y1 = line_dict.start.y
	y2 = line_dict.end.y
endif

if type = TYPE_2D then dl = SQR((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))
if type = TYPE_3D then dl = SQR((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1))

lambda = dr / (dl-dr)
if from_dot = 1 then
	if abs(1+lambda)>EPS then
		dx = (x2 + x1*lambda) / (1+lambda)
		dy = (y2 + y1*lambda) / (1+lambda)
		if type = TYPE_3D then dz = (z2 + z1*lambda) / (1+lambda)
	else
		dx = x1
		dy = y1
		if type = TYPE_3D then dz = z1
	endif
endif
if from_dot = 2 then
	if abs(1+lambda)>EPS then
		dx = (x1 + x2*lambda) / (1+lambda)
		dy = (y1 + y2*lambda) / (1+lambda)
		if type = TYPE_3D then dz = (z1 + z2*lambda) / (1+lambda)
	else
		dx = x2
		dy = y2
		if type = TYPE_3D then dz = z2
	endif
endif

if bDict then
	line_dict.part.x = dx
	line_dict.part.y = dy
	if type = TYPE_3D then line_dict.part.z = dz
endif

goto "m_end"

"m_end":
if bDict then
	exit line_dict
else
	exit dx, dy
endif

