! ASSEGNAZIONE PUNTI BIS PER INSERIMENTO PUNTI PER PATH ==============================================================================

dEPS = 0.000001 !
if abs(poly_point_xy[1][1])> dEPS then
	poly_point_xy[1][1] = 0
	PARAMETERS poly_point_xy = poly_point_xy
endif

if abs(poly_point_xy[1][2])> dEPS then
	poly_point_xy[1][2] = 0
	PARAMETERS poly_point_xy = poly_point_xy
endif

if abs(poly_point_xy[1][3])> dEPS then
	poly_point_xy[1][3] = 0
	PARAMETERS poly_point_xy = poly_point_xy
endif

PARAMETERS poly_pointbis_check_z = poly_pointbis_check_z
PARAMETERS poly_pointbis_check_y = poly_pointbis_check_y
PARAMETERS poly_pointbis_check_x = poly_pointbis_check_x

IF GLOB_MODPAR_NAME = "poly_pointbis_x" OR GLOB_MODPAR_NAME = "poly_pointbis_y" OR GLOB_MODPAR_NAME = "poly_pointbis_z" THEN
	sub_poly_n = poly_n
	sub_poly_closed = poly_closed
	sub_poly_pointbis_x = poly_pointbis_x
	sub_poly_pointbis_y = poly_pointbis_y
	sub_poly_pointbis_z = poly_pointbis_z
	sub_poly_pointbis_check_x = poly_pointbis_check_x
	sub_poly_pointbis_check_y = poly_pointbis_check_y
	sub_poly_pointbis_check_z = poly_pointbis_check_z
	sub_poly_point_xy = poly_point_xy
	sub_poly_3point_d = poly_3point_d
	sub_poly_arc_r = poly_arc_r
	GOSUB 2000

	poly_n = sub_poly_n
	poly_pointbis_x = sub_poly_pointbis_x
	poly_pointbis_y = sub_poly_pointbis_y
	poly_pointbis_z = sub_poly_pointbis_z
	poly_pointbis_check_x = sub_poly_pointbis_check_x
	poly_pointbis_check_y = sub_poly_pointbis_check_y
	poly_pointbis_check_z = sub_poly_pointbis_check_z
	poly_point_xy = sub_poly_point_xy
	poly_3point_d = sub_poly_3point_d
	poly_arc_r = sub_poly_arc_r
ELSE
	poly_pointbis_x = poly_pointbis_check_x
	poly_pointbis_y = poly_pointbis_check_y
	poly_pointbis_z = poly_pointbis_check_z
	PARAMETERS poly_pointbis_x = poly_pointbis_check_x
	PARAMETERS poly_pointbis_y = poly_pointbis_check_y
	PARAMETERS poly_pointbis_z = poly_pointbis_check_z
	PARAMETERS poly_pointbis_check_x = poly_pointbis_check_x
	PARAMETERS poly_pointbis_check_y = poly_pointbis_check_y
	PARAMETERS poly_pointbis_check_z = poly_pointbis_check_z
ENDIF
PARAMETERS poly_arc_r = poly_arc_r
PARAMETERS poly_n = poly_n
PARAMETERS poly_element_res = poly_element_res
PARAMETERS poly_3point_angle=poly_3point_angle
PARAMETERS poly_3point_radius=poly_3point_radius
PARAMETERS poly_3point_xy=poly_3point_xy
PARAMETERS poly_point_xy = poly_point_xy
PARAMETERS poly_3point_d = poly_3point_d

! FINE ASSEGNAZIONE PUNTI BIS PER INSERIMENTO PUNTI PER PATH ==============================================================================	



!FINE CODICE MARIO=============================================================
if haskey(poly_data.aproxn) then _d = REMOVEKEY (poly_data.aproxn)
if haskey(poly_data.otrn) then _d = REMOVEKEY (poly_data.otrn)
if haskey(poly_data.otr) then _d = REMOVEKEY (poly_data.otr)
if haskey(poly_data.aprox) then _d = REMOVEKEY (poly_data.aprox)
if haskey(poly_data.length) then _d = REMOVEKEY (poly_data.length)
if haskey(poly_data.error) then _d = REMOVEKEY (poly_data.error)
poly_data.otrn = poly_n
FOR i = 1 TO poly_n
	poly_data.otr[i].x = poly_point_xy[i][1]
	poly_data.otr[i].y = poly_point_xy[i][2]
	if use_z then
		poly_data.otr[i].z = poly_point_xy[i][3]
	else
		poly_data.otr[i].z = 0
	endif
	poly_data.otr[i].arc = poly_3point_d[i]
	poly_data.otr[i].r = poly_arc_r[i]
next i

i=1
poly_data.aprox[i].x = poly_point_xy[i][1]
poly_data.aprox[i].y = poly_point_xy[i][2]
poly_data.aprox[i].r = poly_arc_r [i]
if use_z then
	poly_data.aprox[i].z = poly_point_xy[i][3]
else
	poly_data.aprox[i].z = 0
endif
FOR x = 1 TO poly_n-1+poly_closed
	IF ABS(poly_3point_d [x]) < EPS  THEN 
		i = i + 1
		poly_data.aprox[i].x = poly_point_xy [x+1][1]
		poly_data.aprox[i].y = poly_point_xy [x+1][2]
		poly_data.aprox[i].r = poly_arc_r [x+1]
		if use_z then
			poly_data.aprox[i].z = poly_point_xy [x+1][3]
		else
			poly_data.aprox[i].z = 0
		endif
	ENDIF
	IF ABS(poly_3point_d [x]) > EPS THEN 
		IF (ABS(poly_point_xy [x][1]-poly_point_xy [x+1][1]) > EPS) OR (ABS(poly_point_xy [x][2]-poly_point_xy [x+1][2]) > EPS) THEN
			poly_res_temp = poly_element_res [1][x]
			if abs(poly_res_temp)<EPS then poly_res_temp = 1
			inc_temp = 0
			punto_arco_ang = ((poly_3point_angle [x][2]-poly_3point_angle [x][1])/poly_res_temp)
			punto_arco_dz = (poly_point_xy[x+1][3]-poly_point_xy[x][3])/poly_res_temp
			FOR g = 1 TO poly_res_temp+1
				IF poly_3point_d [x] > 0 THEN
					punto_arco_x = poly_3point_xy [x][1]+COS(poly_3point_angle [x][1]+punto_arco_ang *(g-1))*poly_3point_radius [x]
					punto_arco_y = poly_3point_xy [x][2]+SIN(poly_3point_angle [x][1]+punto_arco_ang *(g-1))*poly_3point_radius [x]
				ELSE
					punto_arco_x = poly_3point_xy [x][1]+COS(poly_3point_angle [x][2]-punto_arco_ang *(g-1))*poly_3point_radius [x]
					punto_arco_y = poly_3point_xy [x][2]+SIN(poly_3point_angle [x][2]-punto_arco_ang *(g-1))*poly_3point_radius [x]
				ENDIF
				punto_arco_z = poly_point_xy [x][3]+punto_arco_dz * (g-1)
				PUT punto_arco_x,punto_arco_y,punto_arco_z
				i = i + 1
				poly_data.aprox[i].x = punto_arco_x
				poly_data.aprox[i].y = punto_arco_y
				poly_data.aprox[i].r = poly_arc_r[x]
				if use_z then
					poly_data.aprox[i].z = punto_arco_z
				else
					poly_data.aprox[i].z = 0
				endif
			NEXT g
		ELSE
		i = i + 1
			poly_data.aprox[i].x = poly_point_xy [x+1][1]
			poly_data.aprox[i].y = poly_point_xy [x+1][2]
			poly_data.aprox[i].r = poly_arc_r[x+1]
			if use_z then
				poly_data.aprox[i].z = poly_point_xy [x+1][3]
			else
				poly_data.aprox[i].z = 0
			endif
		ENDIF
	ENDIF
NEXT x
poly_data.aproxn = i
poly_data.error = "ok"
k = 200
values{2} "weld_side" itype_weld, ttype_weld
values{2} "weld_side_up" itype_weld, ttype_weld
values "weld_side_coord" 0,1/k, 2/k, 3/k, 4/k

values "weld_side_ang" 0,90,180,270,360,-90,-180,-270,-360
values "weld_side_ang_up" 0,90,180,270,360,-90,-180,-270,-360

if GLOB_MODPAR_NAME = "weld_side_coord" then
	for i=1 to vardim1(weld_side_coord)
		weld_side[i] = int(weld_side_coord[i][1]*k)
		weld_side_up[i] = int(weld_side_coord[i][2]*k)
	next i
	parameters weld_side = weld_side, weld_side_up = weld_side_up
else
	for i=1 to vardim1(weld_side)
		weld_side_coord[i][1] = weld_side[i]/k
		weld_side_coord[i][2] = weld_side_up[i]/k
	next i
	parameters weld_side_coord = weld_side_coord
endif

if GLOB_MODPAR_NAME = "reset_weld" then
	for i=1 to vardim1(weld_side)
		weld_side_coord[i][1] = 0
		weld_side[i] = 0
		weld_side_coord[i][2] = 0
		weld_side_up[i] = 0
	next i
	parameters weld_side = weld_side, weld_side_up = weld_side_up, weld_side_coord = weld_side_coord, reset_weld = 0
endif




PARAMETERS poly_data = poly_data


END



2000:
!SUB PER AGGIUNGERE PUNTI ! ==============================================================================
	
	test = test + 1: PARAMETERS test = test
	IF test = 1 THEN

		PARAMETERS pointbis_da_spostare = 0
		pointbis_da_spostare = 0
		FOR x = 1 TO sub_poly_n -1+sub_poly_closed
			IF ABS(ABS(sub_poly_pointbis_x [x])- ABS(sub_poly_pointbis_check_x [x]))> 0.001 THEN 
				pointbis_da_spostare = x
			ELSE
				IF ABS(ABS(sub_poly_pointbis_y [x])- ABS(sub_poly_pointbis_check_y [x])) > 0.001 THEN 
					pointbis_da_spostare = x
				ELSE
					IF ABS(ABS(sub_poly_pointbis_z [x])- ABS(sub_poly_pointbis_check_z [x])) > 0.001 THEN 
						pointbis_da_spostare = x
					ENDIF
				ENDIF
			ENDIF
		NEXT x
		PARAMETERS pointbis_da_spostare = pointbis_da_spostare
		IF pointbis_da_spostare > 0 THEN
	
			sub_poly_n = sub_poly_n+1
			FOR x = sub_poly_n TO pointbis_da_spostare+2 STEP -1
				sub_poly_point_xy [x][1] = sub_poly_point_xy [x-1][1]
				sub_poly_point_xy [x][2] = sub_poly_point_xy [x-1][2]
				sub_poly_point_xy [x][3] = sub_poly_point_xy [x-1][3]
				sub_poly_3point_d [x] = sub_poly_3point_d [x-1]
				sub_poly_arc_r[x] = sub_poly_arc_r[x-1]
				sub_poly_pointbis_check_x [x] = sub_poly_pointbis_check_x [x-1]
				sub_poly_pointbis_check_y [x] = sub_poly_pointbis_check_y [x-1]
				sub_poly_pointbis_check_z [x] = sub_poly_pointbis_check_z [x-1]
				sub_poly_pointbis_x [x] = sub_poly_pointbis_x [x-1]
				sub_poly_pointbis_y [x] = sub_poly_pointbis_y [x-1]
				sub_poly_pointbis_z [x] = sub_poly_pointbis_z [x-1]

			NEXT x
			sub_poly_3point_d [pointbis_da_spostare] = sub_poly_3point_d [pointbis_da_spostare]/4
			sub_poly_point_xy [pointbis_da_spostare+1][1] = sub_poly_pointbis_x [pointbis_da_spostare] 
			sub_poly_point_xy [pointbis_da_spostare+1][2] = sub_poly_pointbis_y [pointbis_da_spostare] 
			sub_poly_point_xy [pointbis_da_spostare+1][3] = sub_poly_pointbis_z [pointbis_da_spostare] 
			sub_poly_3point_d [pointbis_da_spostare+1] = sub_poly_3point_d [pointbis_da_spostare]
	 		sub_poly_arc_r[pointbis_da_spostare+1] = sub_poly_arc_r[pointbis_da_spostare]
		ENDIF
	ENDIF

	IF GLOB_CONTEXT = 2 OR GLOB_CONTEXT = 22 THEN 
		test_max = 4
	ELSE
		test_max = 6
	ENDIF
	IF test > test_max THEN 
		PARAMETERS test = 0
		test = 0
	ENDIF
RETURN
!FINE SUB PER AGGIUNGERE PUNTI ! ==============================================================================
