EPS = 0.0001
if haskey(poly_data.use_z) then use_z = poly_data.use_z
if haskey(poly_data.poly_closed) then poly_closed = poly_data.poly_closed
if haskey(poly_data.show_line) then show_line = poly_data.show_line

if haskey(poly_data.rx) then rx = poly_data.rx
if haskey(poly_data.ry) then ry = poly_data.ry
if haskey(poly_data.rz) then rz = poly_data.rz
if not(use_z) then
	FOR x = 1 TO poly_n
		if not(use_z) then poly_point_xy[x][3] = 0
	next x
endif

!--------- Подготовка данных для сварки -------------------
dim pos_weld[2][3]
dim ttype_weld[]
dim itype_weld[] : i=0
i=i+1 : itype_weld[i]=0 : ttype_weld[i] = "Нет"
i=i+1 : itype_weld[i]=1 : ttype_weld[i] = "Автоматический угловой"
i=i+1 : itype_weld[i]=2 : ttype_weld[i] = "Автоматический стыковой"
i=i+1 : itype_weld[i]=3 : ttype_weld[i] = "Ручной угловой"
i=i+1 : itype_weld[i]=4 : ttype_weld[i] = "Ручной стыковой"

show_weld_line = 1

if vardim1(weld_side)<vardim1(poly_point_xy)+1 or vardim1(weld_side_up)<vardim1(poly_point_xy)+1 then
	dim weld_side_[90]
	dim weld_side_coord_[90][2]
	for i=1 to 90
		weld_side_[i] = 0
		weld_side_coord_[i][1] = 0
		weld_side_coord_[i][2] = 0
	next i
	parameters weld_side = weld_side_, weld_side_up = weld_side_
	parameters weld_side_coord = weld_side_coord_
endif

if vardim1(weld_side_ang)<vardim1(poly_point_xy)+1 or vardim1(weld_side_ang_up)<vardim1(poly_point_xy)+1 then
	dim weld_side_ang_[90]
	for i=1 to 90
		weld_side_ang_[i] = 0
	next i
	parameters weld_side_ang = weld_side_ang_, weld_side_ang_up = weld_side_ang_
endif

! VERIFICA PUNTI COINCIDENTI PATH ==============================================================================
IF GLOB_MODPAR_NAME = "poly_point_xy" THEN
	FOR x = 1 TO poly_n-1
		IF poly_point_xy [x][1] < poly_point_xy [x+1][1]+ EPS AND poly_point_xy [x][1] > poly_point_xy [x+1][1]- EPS THEN
			IF poly_point_xy [x][2] < poly_point_xy [x+1][2]+ EPS AND poly_point_xy [x][2] > poly_point_xy [x+1][2]- EPS THEN
				IF (poly_point_xy [x][3] < poly_point_xy [x+1][3]+ EPS AND poly_point_xy [x][3] > poly_point_xy [x+1][3]- EPS) OR poly_escludi_z_verif_punti THEN
					FOR y = x+1 TO poly_n-1+poly_closed
						PARAMETERS poly_point_xy [y][1] = poly_point_xy [y+1][1]
						PARAMETERS poly_point_xy [y][2] = poly_point_xy [y+1][2]
						PARAMETERS poly_point_xy [y][3] = poly_point_xy [y+1][3]
						PARAMETERS poly_3point_d [y-1] = poly_3point_d [y]
						poly_point_xy [y][1] = poly_point_xy [y+1][1]
						poly_point_xy [y][2] = poly_point_xy [y+1][2]
						poly_point_xy [y][3] = poly_point_xy [y+1][3]
						poly_3point_d [y-1] = poly_3point_d [y]					
					NEXT y
					PARAMETERS poly_n = poly_n-1
					poly_n = poly_n-1
					GOTO 100
				ENDIF 
			ENDIF
		ENDIF
	NEXT x
	IF poly_closed THEN
		IF poly_point_xy [poly_n][1] < poly_point_xy [1][1]+ EPS AND poly_point_xy [poly_n][1] > poly_point_xy [1][1]- EPS THEN
			IF poly_point_xy [poly_n][2] < poly_point_xy [1][2]+ EPS AND poly_point_xy [poly_n][2] > poly_point_xy [1][2]- EPS THEN
				IF (poly_point_xy [poly_n][3] < poly_point_xy [1][3]+ EPS AND poly_point_xy [poly_n][3] > poly_point_xy [1][3]- EPS) OR poly_escludi_z_verif_punti THEN
					PARAMETERS poly_n = poly_n-1
					poly_n = poly_n-1
					GOTO 100
				ENDIF
			ENDIF
		ENDIF
	ENDIF
100:
ENDIF
! FINE VERIFICA PUNTI COINCIDENTI PATH ==============================================================================

poly_vertex_max = 40

!Parametri sub polilinea DATI
DIM sub_poly_point_xy [40][3] 
DIM sub_poly_3point_d [40]
DIM sub_poly_arc_r [40]
!Parametri sub polilinea
DIM sub_poly_3point_xy [40][3]!.....COORDINATE CENTRO
DIM sub_poly_3point_angle [40][2]!.....ANGOLO A e B
DIM sub_poly_3point_radius [40]

DIM sub_poly_pointbis_check_x [40]!.....COORDINATE punto per aggiungere nuovi punti
DIM sub_poly_pointbis_check_y [40]!.....COORDINATE punto per aggiungere nuovi punti
DIM sub_poly_pointbis_check_z [40]!.....COORDINATE punto per aggiungere nuovi punti
DIM sub_poly_pointbis_x [40]!.....COORDINATE punto per aggiungere nuovi punti
DIM sub_poly_pointbis_y [40]!.....COORDINATE punto per aggiungere nuovi punti
DIM sub_poly_pointbis_z [40]!.....COORDINATE punto per aggiungere nuovi punti

!Parametri sub segmenti polilinea
DIM sub_poly_slope [40]
DIM sub_poly_element_res [40] !n. lati dei lati curvi in caso di risoluzione autonoma

!Parametri polilinea
DIM poly_3point_xy [40][3]!.....COORDINATE CENTRO ARCHI ORIZZONTALI
DIM poly_3point_angle [40][2]!.....ANGOLO A e B
DIM poly_3point_radius [40]

DIM poly_slope [40]

!Parametri segmenti polilinea legati ai post
DIM poly_element_res [10][40] !n. lati dei lati curvi in caso di risoluzione autonoma

!INIZZIALIZZAZIONE VARIABILI========================
FOR x = 1 TO poly_vertex_max
	sub_poly_point_xy [x][1] = 0
	sub_poly_point_xy [x][2] = 0 
	sub_poly_point_xy [x][3] = 0 
	sub_poly_3point_d [x] = 0
	sub_poly_arc_r [x] = 0
	sub_poly_slope [x] = 0
	for y=1 to 10
		poly_element_res[y][x] = 4
	next y
	poly_3point_angle [x][1] = 0
	poly_3point_angle [x][2] = 0
	poly_3point_radius [x] = 0
	poly_3point_xy [x][1] = 0
	poly_3point_xy [x][2] = 0
	poly_3point_xy [x][3] = 0
NEXT x

!SUB PER CALCOLARE VARIABILI PER DISEGNARE LA POLILINEA E DIVISIONE SEGMENTI================

IF poly_closed THEN
	poly_point_xy [poly_n+1][1] = poly_point_xy [1][1]
	poly_point_xy [poly_n+1][2] = poly_point_xy [1][2]
	poly_point_xy [poly_n+1][3] = poly_point_xy [1][3]
ENDIF

!assegnazione variabili
sub_poly_n = poly_n
sub_poly_closed = poly_closed
sub_poly_res = poly_res

sub_poly_point_xy = poly_point_xy
sub_poly_3point_d = poly_3point_d
sub_poly_arc_r = poly_arc_r

GOSUB 400
!riassegnazione variabili di ritorno
FOR x = 1 TO poly_n-1+poly_closed
	
	!Parametri sub polilinea di RITORNO		

	poly_3point_xy [x][1] = sub_poly_3point_xy [x][1]
	poly_3point_xy [x][2] = sub_poly_3point_xy [x][2] 
	poly_3point_angle [x][1] = sub_poly_3point_angle [x][1]
	poly_3point_angle [x][2] = sub_poly_3point_angle [x][2] 
	poly_3point_radius [x] = sub_poly_3point_radius [x]
	poly_slope [x] = sub_poly_slope [x]

	gap_pointbis =0!.08
	poly_pointbis_check_x [x] = sub_poly_pointbis_check_x [x]+gap_pointbis*COS(poly_slope [x]+90)
	poly_pointbis_check_y [x] = sub_poly_pointbis_check_y [x]+gap_pointbis*SIN(poly_slope [x]+90)
	poly_pointbis_check_z [x] = sub_poly_pointbis_check_z [x]+gap_pointbis!*SIN(poly_slope [x]+90)
!	PARAMETERS poly_pointbis_check_x [x] = poly_pointbis_check_x [x] 
!	PARAMETERS poly_pointbis_check_y [x] = poly_pointbis_check_y [x]
!	PARAMETERS poly_pointbis_check_z [x] = poly_pointbis_check_z [x]
	poly_element_res [1][x] = sub_poly_element_res [x]
NEXT x


!FINE SUB PER CALCOLARE VARIABILI PER DISEGNARE LA POLILINEA E DIVISIONE SEGMENTI================


!FINE CODICE MARIO ==========================================================


PUT poly_point_xy [1][1],poly_point_xy [1][2],poly_point_xy [1][3]
FOR x = 1 TO poly_n-1+poly_closed
	IF ABS(poly_3point_d [x]) < EPS  THEN 
		PUT poly_point_xy [x+1][1],poly_point_xy [x+1][2],poly_point_xy [x+1][3]
	ENDIF
	IF ABS(poly_3point_d [x]) > EPS and abs(poly_element_res[1][x])>EPS THEN 
		IF (ABS(poly_point_xy [x][1]-poly_point_xy [x+1][1]) > EPS) OR (ABS(poly_point_xy [x][2]-poly_point_xy [x+1][2]) > EPS) THEN
			poly_res_temp = poly_element_res[1][x]
			if abs(poly_res_temp)<EPS then poly_res_temp = 1
			inc_temp = 0
			punto_arco_ang = ((poly_3point_angle [x][2]-poly_3point_angle [x][1])/poly_res_temp)
			punto_arco_dz = (poly_point_xy[x+1][3]-poly_point_xy[x][3])/poly_res_temp
			FOR g = 1 TO poly_res_temp+1
				IF poly_3point_d [x] > 0 THEN
					punto_arco_x = poly_3point_xy [x][1]+COS(poly_3point_angle [x][1]+punto_arco_ang *(g-1))*poly_3point_radius [x]
					punto_arco_y = poly_3point_xy [x][2]+SIN(poly_3point_angle [x][1]+punto_arco_ang *(g-1))*poly_3point_radius [x]
				ELSE
					punto_arco_x = poly_3point_xy [x][1]+COS(poly_3point_angle [x][2]-punto_arco_ang *(g-1))*poly_3point_radius [x]
					punto_arco_y = poly_3point_xy [x][2]+SIN(poly_3point_angle [x][2]-punto_arco_ang *(g-1))*poly_3point_radius [x]
				ENDIF
				punto_arco_z = poly_point_xy [x][3]+punto_arco_dz * (g-1)
				PUT punto_arco_x,punto_arco_y,punto_arco_z
			NEXT g
		ELSE
			PUT poly_point_xy [x+1][1],poly_point_xy [x+1][2],poly_point_xy [x+1][3]
		ENDIF
	ENDIF
NEXT x

x1 = get(1)
y1 = get(1)
z1 = get(1)
length_poly = 0
for i=1 to nsp/3
	x2 = get(1)
	y2 = get(1)
	z2 = get(1)
	dx = x1 - x2
	dy = y1 - y2
	dz = z1 - z2
	r = SQR(dx*dx+dy*dy+dz*dz)
	length_poly = length_poly + r
	x1 = x2 : y1 = y2 : z1 = z2
next i
GOTO 9999

400:

!INIZIO DEFINISCE PARAMETRI PER DISEGNARE LA POLILINEA ==========================================================
FOR x = 1 TO sub_poly_n-1+1!sub_poly_closed

	!Azzeramento parametri
	!Parametri sub polilinea di RITORNO
	sub_poly_3point_xy [x][1]= 0
	sub_poly_3point_xy [x][2]= 0
	sub_poly_3point_angle [x][1]=0
	sub_poly_3point_angle [x][2]= 0 
	sub_poly_3point_radius [x] = 0

	sub_poly_element_res [x] = 1

	sub_poly_pointbis_check_x [x] = 0 
	sub_poly_pointbis_check_y [x] = 0
	sub_poly_pointbis_check_z [x] = 0


	xx1 = (sub_poly_point_xy [x+1][1] - sub_poly_point_xy [x][1])
	yy1 = (sub_poly_point_xy [x+1][2] - sub_poly_point_xy [x][2])
	zz1 = (sub_poly_point_xy [x+1][3] - sub_poly_point_xy [x][3])

	IF ABS(sub_poly_point_xy [x][1] - sub_poly_point_xy [x+1][1]) > EPS OR ABS(sub_poly_point_xy [x][2] - sub_poly_point_xy [x+1][2]) > EPS THEN
		a7 = 0 : a8 = 0
		IF sub_poly_point_xy [x][1] > sub_poly_point_xy [x+1][1] THEN corr_x1 = 1 ELSE corr_x1 = 0

		IF ABS(xx1) > EPS THEN
			a1= ATN(yy1/xx1)+corr_x1*180 
		ELSE
			a1 = 90*SGN(yy1)
		ENDIF
		IF (a1 < EPS AND a1 > -EPS) OR (a1 < (180+EPS) AND a1 > (180-EPS)) THEN 
			d1 = ABS(xx1)		
		ELSE 
			d1 = ABS(yy1/sin(a1))
		ENDIF
		

		IF ABS(sub_poly_3point_d [x]) < EPS THEN
			sub_poly_slope [x] = a1

			sub_poly_pointbis_check_x [x]= sub_poly_point_xy [x][1]+xx1/2 
			sub_poly_pointbis_check_y [x]= sub_poly_point_xy [x][2]+yy1/2
			sub_poly_pointbis_check_z [x]= sub_poly_point_xy [x][3]+zz1/2
 
		ELSE
			IF sub_poly_point_xy [x][1] > sub_poly_point_xy [x+1][1] THEN corr_x1 = 1 ELSE corr_x1 = 0
	
			IF ABS(xx1) < EPS THEN
				IF YY1 > 0 THEN a1 = 90
				IF YY1 < 0 THEN a1 = 270
				d1 = ABS(yy1)
				a2 = ABS(ATN((d1/2)/sub_poly_3point_d [x]))
				a3 = 180-(a2*2)
				r = (d1/2)/sin(a3)
				a4 = 180-90-a3
				a5 = 180-a4-a1
				IF yy1 > 0 AND sub_poly_3point_d [x]>0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]+(ABS(sub_poly_3point_d [x])-r)
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]+d1/2
					a7 = -a3
					a8 = +a3
				ENDIF
				IF yy1 > 0 AND sub_poly_3point_d [x]<0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]-(ABS(sub_poly_3point_d [x])-r)
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]+d1/2
					a7 = 180-a3
					a8 = 180+a3
				ENDIF
				IF yy1 < 0 AND sub_poly_3point_d [x]>0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]-(ABS(sub_poly_3point_d [x])-r)
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]-d1/2
					a7 = 180-a3
					a8 = 180+a3
				ENDIF
				IF yy1 < 0 AND sub_poly_3point_d [x]<0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]+(ABS(sub_poly_3point_d [x])-r)
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]-d1/2
					a7 = -a3
					a8 = +a3
				ENDIF
				xx2 = sub_poly_3point_d [x]*SGN(yy1)
				yy2 = yy1/2			
			ENDIF

			IF ABS(yy1) < EPS THEN 
				IF xx1 > 0 THEN a1 = 0
				IF xx1 < 0 THEN a1 = 180
				d1 = ABS(xx1)
				a2 = ABS(ATN((d1/2)/sub_poly_3point_d [x]))
				a3 = 180-(a2*2)
				r = (d1/2)/sin(a3)
				a4 = 180-90-a3
				a5 = 180-a4-a1
				IF xx1 > 0 AND sub_poly_3point_d [x]>0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]+d1/2
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]-(ABS(sub_poly_3point_d [x])-r)
					a7 = -90-a3
					a8 = -90+a3
				ENDIF
				IF xx1 > 0 AND sub_poly_3point_d [x]<0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]+d1/2
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]+(ABS(sub_poly_3point_d [x])-r)
					a7 = 90-a3
					a8 = 90+a3
				ENDIF
				IF xx1 < 0 AND sub_poly_3point_d [x]>0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]-d1/2
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]+(ABS(sub_poly_3point_d [x])-r)
					a7 = 90-a3
					a8 = 90+a3
				ENDIF
				IF xx1 < 0 AND sub_poly_3point_d [x]<0 THEN
					sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]-d1/2
					sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]-(ABS(sub_poly_3point_d [x])-r)
					a7 = -90-a3
					a8 = -90+a3
				ENDIF
				xx2 = xx1/2
				yy2 = -sub_poly_3point_d [x]*SGN(xx1)
			ENDIF

			IF ABS(xx1) > EPS AND ABS(yy1) > EPS THEN
				a1= ATN(yy1/xx1)+corr_x1*180 
				d1 = ABS(yy1/sin(a1))
				a2 = ATN((d1/2)/sub_poly_3point_d [x])
				a3 = 180-(a2*2)
				r = (d1/2)/sin(a3)
				a4 = 180-90-a3
				a5 = 180-a4-a1
				a9 = 180-90-a2
				d2 = d1/2/COS(a9)
				a10 = a1-a9
				xx2 = COS(a10)*d2
				yy2 = SIN(a10)*d2

				sub_poly_3point_xy [x][1]= sub_poly_point_xy [x][1]-COS(a5)*r
				sub_poly_3point_xy [x][2]= sub_poly_point_xy [x][2]+SIN(a5)*r



				IF sub_poly_3point_xy [x][1] < sub_poly_point_xy [x][1] THEN
					a7 = ATN((sub_poly_point_xy [x][2]-sub_poly_3point_xy [x][2])/(sub_poly_point_xy [x][1]-sub_poly_3point_xy [x][1]))
				ELSE
					a7 = -180+ATN((sub_poly_point_xy [x][2]-sub_poly_3point_xy [x][2])/(sub_poly_point_xy [x][1]-sub_poly_3point_xy [x][1]))
				ENDIF
	
				IF sub_poly_3point_xy [x][1] < sub_poly_point_xy [x+1][1] THEN
					a8 = ATN((sub_poly_point_xy [x+1][2]-sub_poly_3point_xy [x][2])/(sub_poly_point_xy [x+1][1]-sub_poly_3point_xy [x][1]))
				ELSE
					a8 = -180+ATN((sub_poly_point_xy [x+1][2]-sub_poly_3point_xy [x][2])/(sub_poly_point_xy [x+1][1]-sub_poly_3point_xy [x][1]))
				ENDIF
	
				IF sub_poly_3point_d [x] < 0 THEN 
					a_app= a7
					a7 = a8
					a8 = a_app
				ENDIF
			ENDIF

			sub_poly_pointbis_check_x [x]= sub_poly_point_xy [x][1]+xx2 
			sub_poly_pointbis_check_y [x]= sub_poly_point_xy [x][2]+yy2
			sub_poly_pointbis_check_z [x]= sub_poly_point_xy [x][3]+zz1/2	

			IF a8 < a7 THEN a8 = a8+360
			a11 = a8-a7
			sub_poly_3point_angle [x][1] = a7
			sub_poly_3point_angle [x][2] = a8
			sub_poly_3point_radius [x] = ABS(r)
			sub_poly_slope [x] = a1

			sub_poly_element_res [x] = INT(sub_poly_res/360*ABS(sub_poly_3point_angle [x][2]-sub_poly_3point_angle [x][1]))
	

		ENDIF
		!corregge sub_poly_slope
		IF sub_poly_slope [x] < 0 THEN sub_poly_slope [x] = sub_poly_slope [x] +360 
	ELSE

		sub_poly_pointbis_check_x [x]= sub_poly_point_xy [x][1]
		sub_poly_pointbis_check_y [x]= sub_poly_point_xy [x][2]
		sub_poly_pointbis_check_z [x]= sub_poly_point_xy [x][3]+zz1/2
	ENDIF
NEXT x

RETURN

9999:
