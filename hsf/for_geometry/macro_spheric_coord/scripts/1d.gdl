TO_XYZ = 1TO_RPE = 2r = 0 : etta = 0 : phi = 0x = 0 : y = 0 : z = 0dx = 0 : dy = 0 : dz = 0type = 0if bDict then	if type = 0 then		if haskey(line_dict.start.x) and haskey(line_dict.start.y) and haskey(line_dict.start.z) and haskey(line_dict.end.x) and haskey(line_dict.end.y) and haskey(line_dict.end.z) then			type = TO_RPE		endif		if haskey(line_dict.r) and haskey(line_dict.phi) and haskey(line_dict.etta) and type = 0 then			type = TO_XYZ		endif	endif	if type = TO_RPE and not(haskey(line_dict.start.x) and haskey(line_dict.start.y) and haskey(line_dict.start.z) and haskey(line_dict.end.x) and haskey(line_dict.end.y) and haskey(line_dict.end.z)) then goto "m_end"	if type = TO_XYZ and not(haskey(line_dict.r) and haskey(line_dict.phi) and haskey(line_dict.etta)) then goto "m_end"		if type = TO_XYZ then		r = line_dict.r		phi = line_dict.phi		etta = line_dict.etta		gosub "rphitoxy"		line_dict.end.x = x		line_dict.end.y = y		line_dict.end.z = z	endif	if type = TO_RPE then		dx = line_dict.end.x - line_dict.start.x		dy = line_dict.end.y - line_dict.start.y		dz = line_dict.end.z - line_dict.start.z		gosub "xytorphi"		line_dict.r = r		line_dict.phi = phi		line_dict.etta = etta	endifelse	if type = TO_XYZ then		gosub "rphitoxy"		line_arr[2][1] = x		line_arr[2][2] = y		line_arr[2][3] = z	endif	if type = TO_RPE then		dx = line_arr[2][1] - line_arr[1][1]		dy = line_arr[2][2] - line_arr[1][2]		dz = line_arr[2][3] - line_arr[1][3]		gosub "xytorphi"	endifendifgoto "m_end""xytorphi":	r = SQR(dx*dx+dy*dy+dz*dz)	if dx>0 and dy>=0 then phi = atn(dy/dx)	if dx>0 and dy<0 then phi = atn(dy/dx)+360	if dx<0 then phi = atn(dy/dx)+180	if dx=0 and dy>0 then phi = 90	if dx=0 and dy<0 then phi = 270	if dx=0 and dy=0 then phi = 0	if abs(r)>EPS then		etta = acs(dz/r)	else		etta = 0	endifreturn"rphitoxy":	x = r * sin(etta) * cos(phi)	y = r * sin(etta) * sin(phi)	z = r * cos(etta)return"m_end":if bDict then	exit line_dictelse	if type = TO_XYZ then		exit line_arr	endif	if type = TO_RPE then		exit r, etta, phi	endifendif