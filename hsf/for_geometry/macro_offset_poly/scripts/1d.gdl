!dict polyth
!polyth.in[1].x
!polyth.in[1].y
!polyth.in[1].s
!polyth.thickness = 0.01
!polyth.error = "-"
!call "macro_offset_poly" parameters mop_poly_dict = polyth, RETURNED_PARAMETERS polyth
!if polyth.error = "ok" then
!endif

ESP = 0.0001
dim resPolyIDArray[]
dim outflat[], edgeinfo[]
dim poly_out_1[][3]
dim poly_out_2[][3]

dict polyindict
dict polyoutdict
dict polygonin
dict _t

mop_poly_dict.error = ""
if not(haskey(mop_poly_dict.in)) then 
	mop_poly_dict.error = mop_poly_dict.error + "; not(haskey(mop_poly_dict.in))"
	goto "m_end"
endif
if vardim1(mop_poly_dict.in)<1 then
	mop_poly_dict.error = mop_poly_dict.error + "; vardim1(mop_poly_dict.in)<1"
	goto "m_end"
endif

if not(haskey(mop_poly_dict.thickness)) then
	mop_poly_dict.thickness = 0.001
else
	if abs(mop_poly_dict.thickness)<ESP then mop_poly_dict.thickness = 0.001
endif

isClosed = 0 : if haskey(mop_poly_dict.isClosed) then isClosed = mop_poly_dict.isClosed

dim poly_in[][3]
for i=1 to vardim1(mop_poly_dict.in)
	poly_in[i][1] = mop_poly_dict.in[i].x
	poly_in[i][2] = mop_poly_dict.in[i].y
	if haskey(mop_poly_dict.in[i].s) then
		poly_in[i][3] = mop_poly_dict.in[i].s
	else
		poly_in[i][3] = 1
	endif
next i

call "ProfileConverter_mod" parameters	bProfileToPolyOp	= 1,
									bPolyOpDict			= 1,
									polygon				= poly_in,
						returned_parameters polyindict
polyindict.useEdgeInfo = 0
polyindict.defaultInhEdgeInfo = 1

ch = INITADDONSCOPE ("PolyOperations", "", "")
PREPAREFUNCTION ch, "CreateContainer", "inn", ""
PREPAREFUNCTION ch, "SetSourceContainer", "inn", ""
PREPAREFUNCTION ch, "CreateContainer", "outn", ""
PREPAREFUNCTION ch, "SetDestinationContainer", "outn", ""

PREPAREFUNCTION ch, "StoreDictPolyline", "poly1", polyindict
PREPAREFUNCTION ch, "OffsetParams", "", 1, mop_poly_dict.thickness
nPline = CALLFUNCTION (ch, "OffsetPolyline", "poly1", resPolyIDArray)

if vardim1(resPolyIDArray)=1 then
	CALLFUNCTION (ch, "GetDestinationDictPolyline", resPolyIDArray[1], polyoutdict)
	PREPAREFUNCTION ch, "EmptyContainer", "inn", ""
	PREPAREFUNCTION ch, "EmptyContainer", "outn", ""

	call "ProfileConverter_mod" parameters	bProfileToPolyOp	= 0,
										bPolyOpDict			= 1,
										PolyOpPolygon		= polyoutdict,
							returned_parameters nOut,
												outflat		! closing point always included
	nCoords = 3 * nOut
	for i = 1 to nOut
		k = (i - 1) * 3
		_s = outflat[k + 3]
		if _s > -1 then _s = _s + 1
		if polyoutdict.isClosed=0 and _s < 0 then _s = 1
		poly_out_1[i][1] = outflat[k + 1]
		poly_out_1[i][2] = outflat[k + 2]
		poly_out_1[i][3] = _s
	next i

	call "ProfileConverter_mod" parameters	bProfileToPolyOp	= 0,
										bPolyOpDict			= 1,
										PolyOpPolygon		= polyindict,
							returned_parameters nOut,
												outflat		! closing point always included
	for i = 1 to nOut
		k = (i - 1) * 3
		_s = outflat[k + 3]
		if _s > -1 then _s = _s + 1
		if polyindict.isClosed=0 and _s < 0 then _s = 1
		poly_out_2[i][1] = outflat[k + 1]
		poly_out_2[i][2] = outflat[k + 2]
		poly_out_2[i][3] = _s
	next i

	length_1 = 0 : length_2 = 0
	call "macro_get_polylinelength" parameters coord_arr = poly_out_1, bdict = 0, RETURNED_PARAMETERS length_1
	call "macro_get_polylinelength" parameters coord_arr = poly_out_2, bdict = 0, RETURNED_PARAMETERS length_2
	mop_poly_dict.length = min(length_1, length_2)
	if length_1<EPS then mop_poly_dict.length = length_2
	if length_2<EPS then mop_poly_dict.length = length_1
	dim poly_out_3[][3]
	dim _center[]
	io = 0
	for i = nOut to 1 step -1
		iStatus = int(poly_out_2[i][3])
		if (iStatus > 0) then iStatus = iStatus - iStatus % 100	! drop status 1-99
		if i>2 then
			iStatus_next = int(poly_out_2[i-1][3])
			if (iStatus_next > 0) then iStatus_next = iStatus_next - iStatus_next % 100	! drop status 1-99
		else
			iStatus_next = -1
		endif
		if iStatus_next = 4000 and iStatus <> 900 then
			io = io + 1
			poly_out_3[io][1] = poly_out_2[i][1]
			poly_out_3[io][2] = poly_out_2[i][2]
			poly_out_3[io][3] = poly_out_2[i][3]
			io = io + 1 !900
			poly_out_3[io][1] = poly_out_2[i-2][1]
			poly_out_3[io][2] = poly_out_2[i-2][2]
			poly_out_3[io][3] = poly_out_2[i-2][3]
			io = io + 1 !4000
			poly_out_3[io][1] = poly_out_2[i-1][1]
			poly_out_3[io][2] = -poly_out_2[i-1][2]
			poly_out_3[io][3] = poly_out_2[i-1][3]
		else
			if iStatus_next <> 900 and iStatus <> -1 then
				io = io + 1
				poly_out_3[io][1] = poly_out_2[i][1]
				poly_out_3[io][2] = poly_out_2[i][2]
				poly_out_3[io][3] = poly_out_2[i][3]
			endif
		endif
	next i
	if haskey(mop_poly_dict.out) then _d = REMOVEKEY (mop_poly_dict.out)
	for i=1 to vardim1(poly_out_1)
		j = j + 1
		mop_poly_dict.out[j].x = poly_out_1[i][1]
		mop_poly_dict.out[j].y = poly_out_1[i][2]
		mop_poly_dict.out[j].s = poly_out_1[i][3]
	next i
	for i=1 to vardim1(poly_out_3)
		j = j + 1
		mop_poly_dict.out[j].x = poly_out_3[i][1]
		mop_poly_dict.out[j].y = poly_out_3[i][2]
		mop_poly_dict.out[j].s = poly_out_3[i][3]
	next i
	if polyindict.isClosed or isClosed then
		j = j + 1
		i=vardim1(poly_out_3)
		mop_poly_dict.out[j].x = poly_out_3[i][1]
		mop_poly_dict.out[j].y = poly_out_3[i][2]
		mop_poly_dict.out[j].s = -1
	else
		j = j + 1
		mop_poly_dict.out[j].x = poly_out_1[1][1]
		mop_poly_dict.out[j].y = poly_out_1[1][2]
		mop_poly_dict.out[j].s = -1
	endif

	dim poly_out_4[][3]
	for i=1 to vardim1(mop_poly_dict.out)
		poly_out_4[i][1] = mop_poly_dict.out[i].x
		poly_out_4[i][2] = mop_poly_dict.out[i].y
		poly_out_4[i][3] = mop_poly_dict.out[i].s
	next i
	length_3 = 0
	call "macro_get_polylinelength" parameters coord_arr = poly_out_4, bdict = 0, RETURNED_PARAMETERS length_3
	mop_poly_dict.sum_length = length_3
	mop_poly_dict.error = "ok"
else
	mop_poly_dict.error = mop_poly_dict.error + "; vardim1(resPolyIDArray)<>1"
endif

closeaddonscope ch
goto "m_end"
"m_end":
end mop_poly_dict
