!!summary start
!!------------------------ Чтение файлов в словарь ------------------
!!Входные параметры
!!	mrf2d_read_file[] - массив имён файлы
!!	mrf2d_koeff[][] - массив коэффицентов пересчёта для числовых данных. 
!!	mrf2d_delim - разделитель колонок в файле, по умолчанию ;
!!
!!Выходные параметры
!!	mrf2d_readed_param - выходной словарь
!!	mrf2d_readed_param.is_read - если хотябы один файл прочитан, возвращает 0. Если ни один файл не прочитан - 0
!!		mrf2d_readed_param.file[i_file].is_read - если файл не прочитан, возвращает 0. Если прочитан, возвращает количество строк
!!			mrf2d_readed_param.file[i_file]._v1[] ... _v10[] - прочитанные массивы, помноженные на коэфф. пересчёта
!!			mrf2d_readed_param.file[i_file].n_col - возвращает количество столбцов
!!			mrf2d_readed_param.file[i_file].fname - возвращает имя файла

!!!----------------------- Пример использования --------------------
!!!dim read_file[]
!!!dim mrf2d_koeff[][]
!!!!!Заполняем имена файлов
!!!read_file[1] = "ду_din"
!!!read_file[2] = "отвод_и2_17375"
!!!
!!!!!Заполняем коэфф (перевод мм в м)
!!!mrf2d_koeff[1][1]=1/1000
!!!mrf2d_koeff[1][6]=1/1000
!!!
!!!dict mrf2d_readed_param
!!!call "macro_read_file2dict" parameters all mrf2d_read_file = read_file, mrf2d_koeff = mrf2d_koeff returned_parameters mrf2d_readed_param
!!!if haskey(mrf2d_readed_param.is_read) then
!!!	if mrf2d_readed_param.is_read then
!!!		if haskey(mrf2d_readed_param.file) then
!!!			if haskey(mrf2d_readed_param.file[1].is_read) then
!!!				if mrf2d_readed_param.file[1].is_read>0 then
!!!					!!! Тут код для использования прочитанных массивов
!!!					!!!parameters tDN = mrf2d_readed_param.file[1]._v1
!!!				endif
!!!			endif
!!!		endif
!!!
!!!	endif
!!!endif
!!!summary end

EPS = 0.0001
DICT read_array
dim emp1[] : emp1[1]=""
dim varr_1[] : dim varr_2[] : dim varr_3[] : dim varr_4[] : dim varr_5[] : dim varr_6[] : dim varr_7[] : dim varr_8[] : dim varr_9[] : dim varr_10[]
dim varr_11[] : dim varr_12[] : dim varr_13[] : dim varr_14[] : dim varr_15[] : dim varr_16[] : dim varr_17[] : dim varr_18[] : dim varr_19[] : dim varr_20[]
dim mrf2d_koeff_[]

if strlen(mrf2d_delim)=0 then mrf2d_delim=";"
koeff_var = 1
n_row_koeff = 1

mrf2d_readed_param.is_read = 0
for i_file=1 to vardim1(mrf2d_read_file)
	if strlen(mrf2d_read_file[i_file])>1 then
		n_row_koeff = min(i_file, vardim1(mrf2d_koeff))
		fname = mrf2d_read_file[i_file]
		gosub "clear_temp_dict"
		gosub "get_n_var"
		gosub "read_file"
		mrf2d_readed_param.file[i_file] = read_array
		mrf2d_readed_param.file[i_file].fname = fname
		if in>1 then mrf2d_readed_param.is_read = 1
	endif
next i_file

goto "m_end"

"get_n_var":
	n_var = 0
	var = ""
	ch3=OPEN("TEXT", fname,"SEPARATOR='"+mrf2d_delim+"',MODE=RO,LIBRARY")
	i = 1 : _v1="": _v2="": _v3="": _v4="": _v5="": _v6="": _v7="" : _v8="": _v9="": _v10=""
	_v11="": _v12="": _v13="": _v14="": _v15="": _v16="": _v17="" : _v18="": _v19="": _v20=""
	n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15,_v16,_v17,_v18,_v19,_v20)

	if n>0 then
		var = _v1 : gosub "add_nvar"
	endif
	if n>1 then
		var = _v2 : gosub "add_nvar"
	endif
	if n>2 then
		var = _v3 : gosub "add_nvar"
	endif
	if n>3 then
		var = _v4 : gosub "add_nvar"
	endif
	if n>4 then
		var = _v5 : gosub "add_nvar"
	endif
	if n>5 then
		var = _v6 : gosub "add_nvar"
	endif
	if n>6 then
		var = _v7 : gosub "add_nvar"
	endif
	if n>7 then
		var = _v8 : gosub "add_nvar"
	endif
	if n>8 then
		var = _v9 : gosub "add_nvar"
	endif
	if n>9 then
		var = _v10 : gosub "add_nvar"
	endif
	if n>10 then
		var = _v11 : gosub "add_nvar"
	endif
	if n>11 then
		var = _v12 : gosub "add_nvar"
	endif
	if n>12 then
		var = _v13 : gosub "add_nvar"
	endif
	if n>13 then
		var = _v14 : gosub "add_nvar"
	endif
	if n>14 then
		var = _v15 : gosub "add_nvar"
	endif
	if n>15 then
		var = _v16 : gosub "add_nvar"
	endif
	if n>16 then
		var = _v17 : gosub "add_nvar"
	endif
	if n>17 then
		var = _v18 : gosub "add_nvar"
	endif
	if n>18 then
		var = _v19 : gosub "add_nvar"
	endif
	if n>19 then
		var = _v20 : gosub "add_nvar"
	endif
	for i_koeff=1 to n_var
		mrf2d_koeff_[i_koeff] = 1
	next i_koeff
	for i_koeff=1 to vardim2(mrf2d_koeff)
		if abs(mrf2d_koeff[n_row_koeff][i_koeff])>EPS then
			mrf2d_koeff_[i_koeff] = mrf2d_koeff[n_row_koeff][i_koeff]
		endif
	next i_koeff
	close (ch3)
return


"read_file":
	!!---------- Чтение файла --------------------
	varr_1 = emp1 : varr_2 = emp1 : varr_3 = emp1 : varr_4 = emp1 : varr_5 = emp1 : varr_6 = emp1 : varr_7 = emp1 : varr_8 = emp1 : varr_9 = emp1 : varr_10 = emp1
	varr_11 = emp1 : varr_12 = emp1 : varr_13 = emp1 : varr_14 = emp1 : varr_15 = emp1 : varr_16 = emp1 : varr_17 = emp1 : varr_18 = emp1 : varr_19 = emp1 : varr_20 = emp1
	if n_var<1 then n_var = 1
	if n_var>20 then n_var = 20
	ch3=OPEN("TEXT", fname,"SEPARATOR=';',MODE=RO,LIBRARY")
	i = 2 : in = 1 : n = 1 : j = 1 : _v1="": _v2="": _v3="": _v4="": _v5="": _v6="": _v7="" : _v8="": _v9="": _v10=""
	_v11="": _v12="": _v13="": _v14="": _v15="": _v16="": _v17="" : _v18="": _v19="": _v20=""
	"nxt":
	if n <> -1 then
		if n_var = 1 then n=INPUT(ch3,i,1,_v1)
		if n_var = 2 then n=INPUT(ch3,i,1,_v1,_v2)
		if n_var = 3 then n=INPUT(ch3,i,1,_v1,_v2,_v3)
		if n_var = 4 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4)
		if n_var = 5 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5)
		if n_var = 6 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6)
		if n_var = 7 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7)
		if n_var = 8 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8)
		if n_var = 9 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9)
		if n_var = 10 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10)
		if n_var = 11 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11)
		if n_var = 12 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12)
		if n_var = 13 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13)
		if n_var = 14 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14)
		if n_var = 15 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15)
		if n_var = 16 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15,_v16)
		if n_var = 17 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15,_v16,_v17)
		if n_var = 18 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15,_v16,_v17,_v18)
		if n_var = 19 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15,_v16,_v17,_v18,_v19)
		if n_var = 20 then n=INPUT(ch3,i,1,_v1,_v2,_v3,_v4,_v5,_v6,_v7,_v8,_v9,_v10,_v11,_v12,_v13,_v14,_v15,_v16,_v17,_v18,_v19,_v20)

		var = _v1 : i_var = 1 : gosub "set_koeff" : _v1 = var
		var = _v2 : i_var = 2 : gosub "set_koeff" : _v2 = var
		var = _v3 : i_var = 3 : gosub "set_koeff" : _v3 = var
		var = _v4 : i_var = 4 : gosub "set_koeff" : _v4 = var
		var = _v5 : i_var = 5 : gosub "set_koeff" : _v5 = var
		var = _v6 : i_var = 6 : gosub "set_koeff" : _v6 = var
		var = _v7 : i_var = 7 : gosub "set_koeff" : _v7 = var
		var = _v8 : i_var = 8 : gosub "set_koeff" : _v8 = var
		var = _v9 : i_var = 9 : gosub "set_koeff" : _v9 = var
		var = _v10 : i_var = 10 : gosub "set_koeff" : _v10 = var
		var = _v11 : i_var = 11 : gosub "set_koeff" : _v11 = var
		var = _v12 : i_var = 12 : gosub "set_koeff" : _v12 = var
		var = _v13 : i_var = 13 : gosub "set_koeff" : _v13 = var
		var = _v14 : i_var = 14 : gosub "set_koeff" : _v14 = var
		var = _v15 : i_var = 15 : gosub "set_koeff" : _v15 = var
		var = _v16 : i_var = 16 : gosub "set_koeff" : _v16 = var
		var = _v17 : i_var = 17 : gosub "set_koeff" : _v17 = var
		var = _v18 : i_var = 18 : gosub "set_koeff" : _v18 = var
		var = _v19 : i_var = 19 : gosub "set_koeff" : _v19 = var
		var = _v20 : i_var = 20 : gosub "set_koeff" : _v20 = var

		is_same_type = 1
		if in>1 then
			if n_var > 0 and is_same_type>EPS then
				if vartype(varr_1[in-1]) <> vartype(_v1) then
					if vartype(varr_1[in-1]) = 2 then
						_v1 = str("%.0", _v1)
					else
						is_same_type = -1
					endif
				endif
			endif
			if n_var > 1 and is_same_type>EPS then
				if vartype(varr_2[in-1]) <> vartype(_v2) then
					if vartype(varr_2[in-1]) = 2 then
						_v2 = str("%.0", _v2)
					else
						is_same_type = -2
					endif
				endif
			endif
			if n_var > 2 and is_same_type>EPS then
				if vartype(varr_3[in-1]) <> vartype(_v3) then
					if vartype(varr_3[in-1]) = 2 then
						_v3 = str("%.0", _v3)
					else
						is_same_type = -3
					endif
				endif
			endif
			if n_var > 3 and is_same_type>EPS then
				if vartype(varr_4[in-1]) <> vartype(_v4) then
					if vartype(varr_4[in-1]) = 2 then
						_v4 = str("%.0", _v4)
					else
						is_same_type = -4
					endif
				endif
			endif
			if n_var > 4 and is_same_type>EPS then
				if vartype(varr_5[in-1]) <> vartype(_v5) then
					if vartype(varr_5[in-1]) = 2 then
						_v5 = str("%.0", _v5)
					else
						is_same_type = -5
					endif
				endif
			endif
			if n_var > 5 and is_same_type>EPS then
				if vartype(varr_6[in-1]) <> vartype(_v6) then
					if vartype(varr_6[in-1]) = 2 then
						_v6 = str("%.0", _v6)
					else
						is_same_type = -6
					endif
				endif
			endif
			if n_var > 6 and is_same_type>EPS then
				if vartype(varr_7[in-1]) <> vartype(_v7) then
					if vartype(varr_7[in-1]) = 2 then
						_v7 = str("%.0", _v7)
					else
						is_same_type = -7
					endif
				endif
			endif
			if n_var > 7 and is_same_type>EPS then
				if vartype(varr_8[in-1]) <> vartype(_v8) then
					if vartype(varr_8[in-1]) = 2 then
						_v8 = str("%.0", _v8)
					else
						is_same_type = -8
					endif
				endif
			endif
			if n_var > 8 and is_same_type>EPS then
				if vartype(varr_9[in-1]) <> vartype(_v9) then
					if vartype(varr_9[in-1]) = 2 then
						_v9 = str("%.0", _v9)
					else
						is_same_type = -9
					endif
				endif
			endif
			if n_var > 9 and is_same_type>EPS then
				if vartype(varr_10[in-1]) <> vartype(_v10) then
					if vartype(varr_10[in-1]) = 2 then
						_v10 = str("%.0", _v10)
					else
						is_same_type = -10
					endif
				endif
			endif
			if n_var > 10 and is_same_type>EPS then
				if vartype(varr_11[in-1]) <> vartype(_v11) then
					if vartype(varr_11[in-1]) = 2 then
						_v11 = str("%.0", _v11)
					else
						is_same_type = -11
					endif
				endif
			endif
			if n_var > 11 and is_same_type>EPS then
				if vartype(varr_12[in-1]) <> vartype(_v12) then
					if vartype(varr_12[in-1]) = 2 then
						_v12 = str("%.0", _v12)
					else
						is_same_type = -12
					endif
				endif
			endif
			if n_var > 12 and is_same_type>EPS then
				if vartype(varr_13[in-1]) <> vartype(_v13) then
					if vartype(varr_13[in-1]) = 2 then
						_v13 = str("%.0", _v13)
					else
						is_same_type = -13
					endif
				endif
			endif
			if n_var > 13 and is_same_type>EPS then
				if vartype(varr_14[in-1]) <> vartype(_v14) then
					if vartype(varr_14[in-1]) = 2 then
						_v14 = str("%.0", _v14)
					else
						is_same_type = -14
					endif
				endif
			endif
			if n_var > 14 and is_same_type>EPS then
				if vartype(varr_15[in-1]) <> vartype(_v15) then
					if vartype(varr_15[in-1]) = 2 then
						_v15 = str("%.0", _v15)
					else
						is_same_type = -15
					endif
				endif
			endif
			if n_var > 15 and is_same_type>EPS then
				if vartype(varr_16[in-1]) <> vartype(_v16) then
					if vartype(varr_16[in-1]) = 2 then
						_v16 = str("%.0", _v16)
					else
						is_same_type = -16
					endif
				endif
			endif
			if n_var > 16 and is_same_type>EPS then
				if vartype(varr_17[in-1]) <> vartype(_v17) then
					if vartype(varr_17[in-1]) = 2 then
						_v17 = str("%.0", _v17)
					else
						is_same_type = -17
					endif
				endif
			endif
			if n_var > 17 and is_same_type>EPS then
				if vartype(varr_18[in-1]) <> vartype(_v18) then
					if vartype(varr_18[in-1]) = 2 then
						_v18 = str("%.0", _v18)
					else
						is_same_type = -18
					endif
				endif
			endif
			if n_var > 18 and is_same_type>EPS then
				if vartype(varr_19[in-1]) <> vartype(_v19) then
					if vartype(varr_19[in-1]) = 2 then
						_v19 = str("%.0", _v19)
					else
						is_same_type = -19
					endif
				endif
			endif
			if n_var > 19 and is_same_type>EPS then
				if vartype(varr_20[in-1]) <> vartype(_v20) then
					if vartype(varr_20[in-1]) = 2 then
						_v20 = str("%.0", _v20)
					else
						is_same_type = -20
					endif
				endif
			endif
		endif
		if is_same_type>EPS then
			if n_var > 0 then varr_1[in] = _v1
			if n_var > 1 then varr_2[in] = _v2
			if n_var > 2 then varr_3[in] = _v3
			if n_var > 3 then varr_4[in] = _v4
			if n_var > 4 then varr_5[in] = _v5
			if n_var > 5 then varr_6[in] = _v6
			if n_var > 6 then varr_7[in] = _v7
			if n_var > 7 then varr_8[in] = _v8
			if n_var > 8 then varr_9[in] = _v9
			if n_var > 9 then varr_10[in] = _v10
			if n_var > 10 then varr_11[in] = _v11
			if n_var > 11 then varr_12[in] = _v12
			if n_var > 12 then varr_13[in] = _v13
			if n_var > 13 then varr_14[in] = _v14
			if n_var > 14 then varr_15[in] = _v15
			if n_var > 15 then varr_16[in] = _v16
			if n_var > 16 then varr_17[in] = _v17
			if n_var > 17 then varr_18[in] = _v18
			if n_var > 18 then varr_19[in] = _v19
			if n_var > 19 then varr_20[in] = _v20
			in = in + 1
		else
			if GLOB_DIAGNOSTICS_MODE then print "Error type : " + fname + " row: " + str("%.0", i) + " col: " + str("%.0", abs(is_same_type))
		endif
		i = i + 1
		goto "nxt"
	else
		close (ch3)
	endif
	if in>0 then
		read_array.v1 = varr_1
		read_array.v2 = varr_2
		read_array.v3 = varr_3
		read_array.v4 = varr_4
		read_array.v5 = varr_5
		read_array.v6 = varr_6
		read_array.v7 = varr_7
		read_array.v8 = varr_8
		read_array.v9 = varr_9
		read_array.v10 = varr_10
		read_array.v11 = varr_11
		read_array.v12 = varr_12
		read_array.v13 = varr_13
		read_array.v14 = varr_14
		read_array.v15 = varr_15
		read_array.v16 = varr_16
		read_array.v17 = varr_17
		read_array.v18 = varr_18
		read_array.v19 = varr_19
		read_array.v20 = varr_20
		read_array.is_read = in-1
		read_array.n_col = n_var
	endif
return

"clear_temp_dict":
	if HASKEY(read_array.v1) then n = REMOVEKEY(read_array.v1)
	if HASKEY(read_array.v2) then n = REMOVEKEY (read_array.v2)
	if HASKEY(read_array.v3) then n = REMOVEKEY (read_array.v3)
	if HASKEY(read_array.v4) then n = REMOVEKEY (read_array.v4)
	if HASKEY(read_array.v5) then n = REMOVEKEY (read_array.v5)
	if HASKEY(read_array.v6) then n = REMOVEKEY (read_array.v6)
	if HASKEY(read_array.v7) then n = REMOVEKEY (read_array.v7)
	if HASKEY(read_array.v8) then n = REMOVEKEY (read_array.v8)
	if HASKEY(read_array.v9) then n = REMOVEKEY (read_array.v9)
	if HASKEY(read_array.v10) then n = REMOVEKEY (read_array.v10)
	if HASKEY(read_array.v11) then n = REMOVEKEY(read_array.v11)
	if HASKEY(read_array.v12) then n = REMOVEKEY (read_array.v12)
	if HASKEY(read_array.v13) then n = REMOVEKEY (read_array.v13)
	if HASKEY(read_array.v14) then n = REMOVEKEY (read_array.v14)
	if HASKEY(read_array.v15) then n = REMOVEKEY (read_array.v15)
	if HASKEY(read_array.v16) then n = REMOVEKEY (read_array.v16)
	if HASKEY(read_array.v17) then n = REMOVEKEY (read_array.v17)
	if HASKEY(read_array.v18) then n = REMOVEKEY (read_array.v18)
	if HASKEY(read_array.v19) then n = REMOVEKEY (read_array.v19)
	if HASKEY(read_array.v20) then n = REMOVEKEY (read_array.v20)
	if HASKEY(read_array.is_read) then n = REMOVEKEY (read_array.is_read)
	if HASKEY(read_array.n_col) then n = REMOVEKEY (read_array.n_col)
	read_array.is_read = 0
return

"set_koeff":
	if vartype(var)=1 then
		var = var * mrf2d_koeff_[i_var]
	endif
return

"add_nvar":
	if vartype(var)=2 then
		if strlen(var)>0 then n_var = n
	else
		if abs(var)>EPS then n_var = n
	endif
return

"m_end":

end mrf2d_readed_param
